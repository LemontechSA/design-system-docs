<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Lemon System Blog</title>
        <link>https://lemontechsa.github.io/design-system-docs/blog</link>
        <description>Lemon System Blog</description>
        <lastBuildDate>Thu, 10 Mar 2022 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[¬øC√≥mo contruimos Lemon System?]]></title>
            <link>https://lemontechsa.github.io/design-system-docs/blog/how-we-built-it</link>
            <guid>how-we-built-it</guid>
            <pubDate>Thu, 10 Mar 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Para el desarrollo de Lemon System, la librer√≠a UI del Design System de Lemontech, hemos tomado diferentes decisiones con respecto a implementaciones t√©cnicas. En este blog planteamos las diferentes dificultades t√©cnicas a las que nos hemos vistos enfrentados y el c√≥mo optamos por solucionarlas.]]></description>
            <content:encoded><![CDATA[<br><p>Para el desarrollo de <strong>Lemon System</strong>, la librer√≠a UI del Design System de <a href="https://www.lemontech.com" target="_blank" rel="noopener noreferrer">Lemontech</a>, hemos tomado diferentes decisiones con respecto a implementaciones t√©cnicas. En este blog planteamos las diferentes dificultades t√©cnicas a las que nos hemos vistos enfrentados y el c√≥mo optamos por solucionarlas.</p><br><blockquote><p>üöß Lemon System sigue en desarrollo, debido a esto puede que algunos elementos escritos aqu√≠ con el tiempo cambien o esten desactualizados.</p></blockquote><br><h1>Requerimientos</h1><p>Los siguientes requerimientos fueron planteados para Lemon System:</p><ul><li>Debe ser consistente con el Design System de Lemontech.</li><li>Debe ser facilmente adaptable en los equipos de Lemontech.</li><li>No debe crear mayores inconvenientes al ser implemenado en nuevas o en ya creadas aplicaciones.</li></ul><h1>Decisiones de implementaci√≥n</h1><h2 class="anchor anchorWithStickyNavbar_LWe7" id="enfoque">Enfoque<a class="hash-link" href="#enfoque" title="Direct link to heading">‚Äã</a></h2><br><div class="#1mjcm6l #li55pj #8gfukc"><img loading="lazy" src="/design-system-docs/assets/images/ui-libraries-239319149e0a58618272e09b24523f0b.png" width="500" alt="Categorias de las Librer√≠as UI" class="img_ev3q"><p><em>Categorias de Librer√≠as UI.</em></p></div><br><p>Existen variados enfoques para definir una librer√≠a de interfaces, las cuales podemos dividir en tres grandes categor√≠as: <strong>CSS++</strong> (Librer√≠as que solo entregan un CSS potenciado), <strong>Style Systems</strong> (librer√≠as que solamente brindan estilos) y <strong>Behavior Libraries</strong> (librer√≠as que solo ofrecen un manejo del comportamiento). Tambi√©n existen librer√≠as que estan entre las intersecciones de estas categor√≠as y que a√±aden un conjunto de funcionalidades.</p><p>La mejor opci√≥n para que Lemon System tuviese una consistencia con el Design System y que adem√°s brindar√° una mejor <a href="https://medium.com/swlh/what-is-dx-developer-experience-401a0e44a9d9" target="_blank" rel="noopener noreferrer">experiencia de desarrollo (DX)</a> y, por lo mismo, una mejor adaptabilidad era optar por desarrollar la librer√≠a cubriendo las 3 categor√≠as mencionadas, tal como lo hacen <a href="https://mui.com" target="_blank" rel="noopener noreferrer">MUI</a>, <a href="https://chakra-ui.com" target="_blank" rel="noopener noreferrer">Chakra UI</a> y <a href="https://mantine.dev" target="_blank" rel="noopener noreferrer">Mantine</a>.</p><br><div class="#1mjcm6l #li55pj #8gfukc"><img loading="lazy" src="/design-system-docs/assets/images/librarie-subcategories-3a9bebb9338b6bbc953a91503a2169a8.png" width="350" alt="Sub-categorias de librer√≠as UI" class="img_ev3q"><p><em>Sub-categorias de librer√≠as UI.</em></p></div><br><p>Para que la librer√≠a fuese facilmente adoptable era necesario que su estilizaci√≥n no fuese compleja y preferiblemente que no se tuviese que crear CSS StyleSheets sino que fuese simplemente con clases de <a href="https://tailwindcss.com" target="_blank" rel="noopener noreferrer">Tailwind CSS</a>, que era algo, que en ciertos equipos, ya estaba siendo aplicado y les facilitiba el desarrollo.</p><p>En Chakra UI, MUI y Mantine la estilizaci√≥n es mediante <strong>Style Props</strong> (estilos como propiedad) y/o usando la convenci√≥n <strong>sx</strong>, usando e inspirandose en librer√≠as como <a href="https://styled-system.com" target="_blank" rel="noopener noreferrer">Styled System</a> y <a href="https://theme-ui.com" target="_blank" rel="noopener noreferrer">Theme UI</a>.</p><br><div class="#1mjcm6l #li55pj #8gfukc"><img loading="lazy" src="/design-system-docs/assets/images/code-comparation-91cf60ce8a08cbef432866e3ae20edae.png" width="500" alt="Las 3 formas de estilizar un componente." class="img_ev3q"></div><br><p>Este enfoque de crear una librer√≠a la cual, aparte de brindar estilos y comportamiento, se pudiese estilizar con Tailwind CSS es novedoso y no teniamos presedentes en los cuales inspirarnos, por lo cual investigamos su factibilidad t√©cnica probando usar las tres siguientes opciones como librer√≠a base de Lemon System:</p><ul><li><a href="https://tailwindcss.com" target="_blank" rel="noopener noreferrer">Tailwind CSS</a></li><li><a href="https://github.com/ben-rogerson/twin.macro" target="_blank" rel="noopener noreferrer">Twin.macro</a></li><li><a href="https://twind.dev" target="_blank" rel="noopener noreferrer">Twind</a></li></ul><p>Lo primero que se puede pensar es: ¬øpor qu√© no usar simplemente Tailwind CSS en Lemon System? Y, en verdad, ser√≠a la opci√≥n ideal pero que lastimamente no es algo factible de hacer.</p><p>Tailwind CSS en una aplicaci√≥n de React funciona con los post-procesador de CSS: <a href="https://autoprefixer.github.io" target="_blank" rel="noopener noreferrer">Autoprefixer</a> y <a href="https://purgecss.com" target="_blank" rel="noopener noreferrer">PurgeCSS</a>, estos en conjunto pueden inyectar CSS a un fichero CSS StyleSheet para estilizar los componentes con clases de Tailwind CSS.</p><p>La principal complicaci√≥n t√©cnica que tiene el implementar Tailwind CSS en la librer√≠a directamente es que es imperioso para Tailwind inyectar CSS en un CSS StyleSheet y debido a este proceso es que ya no se le podr√≠a encargar a Lemon System la responsabilidad de configurar Tailwind CSS sino que esta es traspasada al que implementa la librer√≠a en su aplicaci√≥n, y lo mismo pasar√≠a con respecto a su configuraci√≥n, que depender√≠a del framework que est√© ocupando (create-react-app, Next.js, Vite, etc...).</p><p>Otro punto a considerar es en el ambiente desarrollo de Lemon System, en este, para que fuese posible desarrollar con Tailwind CSS se tendr√≠a que implementar una configuraci√≥n en la empaquetaci√≥n del c√≥digo fuente para poder userse junto con Storybook, luego, crear otra configuraci√≥n en la empaquetaci√≥n para el bundle que ser√≠a distribuido en npm y, por √∫ltimo, se tendr√≠a que tener en cuenta tambi√©n el purge al implementar la librer√≠a en alguna app.</p><p>El conjunto de estas problematicos nos hizo decantarnos por las opciones de Tailwind css-in-js probando Twind y Twin.macro.</p><br><div class="#1mjcm6l #li55pj #8gfukc"><img loading="lazy" src="/design-system-docs/assets/images/twind-twin-comparation-2b207fa524f9b6c2b0c8d1fcb69e30aa.png" width="600" alt="Comparaci√≥n entre Twin.macro y Twind" class="img_ev3q"><p><em>Comparaci√≥n entre Twin.macro y Twind.</em></p></div><br><p><strong>Twin.macro</strong> es una librer√≠a que funciona con una <a href="https://github.com/kentcdodds/babel-plugin-macros" target="_blank" rel="noopener noreferrer">Macro</a> de Babel que permite estilizar componentes css-in-js usando clases de Tailwdin CSS y cuya transformaci√≥n es hecha en la compilaci√≥n.</p><p>Esta alternativa si bien es interesante para ser implementada en aplicaciones no lo es tanto para librer√≠as. Si se implementa en una librer√≠a, como en Lemon System, y luego esta es instalada en una app, como la transformaci√≥n de Babel es en build time, la estilizaci√≥n con clases de Tailwind CSS que se haga en los componentes no se ver√≠an reflejados en la app.</p><p>En <strong>Twind</strong> es diferente, no es necesario una compilaci√≥n previa y en comparaci√≥n de otras librer√≠as css-in-js su inyecci√≥n de CSS es <a href="https://twind.dev/handbook/introduction.html#benchmarks" target="_blank" rel="noopener noreferrer">m√°s optima</a>. Por lo que usar Twind como librer√≠a base para Lemon System ser√≠a lo m√°s sencillo y optimo, y es por lo cual optamos por utilizarla.</p><button class="#fws896 #1gzn608 #bnnaeh" type="button">Press me!</button><br><br><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword module" style="color:#00009f">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:#393A34">{</span><span class="token imports"> </span><span class="token imports maybe-class-name">Button</span><span class="token imports"> </span><span class="token imports punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword module" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"lemon-system"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">&lt;</span><span class="token maybe-class-name">Button</span><span class="token plain"> className</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">"uppercase p-10"</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token maybe-class-name">Press</span><span class="token plain"> me</span><span class="token operator" style="color:#393A34">!</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token operator" style="color:#393A34">/</span><span class="token maybe-class-name">Button</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="definici√≥n-de-bundle">Definici√≥n de Bundle<a class="hash-link" href="#definici√≥n-de-bundle" title="Direct link to heading">‚Äã</a></h2><br><div class="#1mjcm6l #li55pj #8gfukc"><img loading="lazy" src="/design-system-docs/assets/images/esbuild-comparation-036e7957bf72ae4404b08a54cf545b7c.png" width="600" alt="ESBuild benchmark" class="img_ev3q"><p><em>Benchmark <a href="https://esbuild.github.io" target="_blank" rel="noopener noreferrer">https://esbuild.github.io</a></em></p></div><br><p>Para empaquetar el codigo fuente y poder distribuir la librer√≠a en npm teniamos diferentes opciones:</p><ul><li><a href="https://webpack.js.org" target="_blank" rel="noopener noreferrer">Webpack</a></li><li><a href="https://rollupjs.org/guide/en" target="_blank" rel="noopener noreferrer">Rollup</a></li><li><a href="https://esbuild.github.io" target="_blank" rel="noopener noreferrer">Esbuild</a></li></ul><p>Webpack es la soluci√≥n m√°s comun actualmente para empaquetar aplicaciones web pero de apoco ESBuild y Rollup han ido tomando m√°s espacio por su mayor eficiencia de empaquetaci√≥n y su simplicidad al ser configurados.</p><p>En comparaci√≥n con Rollup y Webpack, la alternativa de Esbuild viene listo, desde su instalaci√≥n, para empaquetar jsx y typescript sin necesidad de configurar nada y adem√°s de que su rapidez para empaquetar las apps es mucho mayor que las dos alternativas previas hizo que nos decantaramos por esta opci√≥n.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="administrador-de-paquetes">Administrador de paquetes<a class="hash-link" href="#administrador-de-paquetes" title="Direct link to heading">‚Äã</a></h2><br><div class="#1mjcm6l #li55pj #8gfukc"><img loading="lazy" src="/design-system-docs/assets/images/packages-comparation-ef2026a6804528eefa586fbf10d48c66.png" width="600" alt="Packages benchmark" class="img_ev3q"><p><em>Benchmark <a href="https://pnpm.io/benchmarks" target="_blank" rel="noopener noreferrer">https://pnpm.io/benchmarks</a>.</em></p></div><br><p>Como administrador de librer√≠as se tomaron en cuenta las siguientes:</p><ul><li><a href="https://www.npmjs.com" target="_blank" rel="noopener noreferrer">Npm</a></li><li><a href="https://yarnpkg.com" target="_blank" rel="noopener noreferrer">Yarn</a></li><li><a href="https://pnpm.io/es" target="_blank" rel="noopener noreferrer">Pnpm</a></li></ul><p>Uno de los principios t√©cnicos por lo que nos guiamos para la contrucci√≥n de Lemon System fue la simplicidad, el evitar implementaci√≥nes que no contuviesen mayores beneficios.</p><p>Con respecto a Yarn, si bien, solia optarse debido a que era m√°s rapido como administrador de paquetes que npm. Actualmente no hay gran diferenc√≠a entre estas, y a√±adiendo el hecho de que yarn sea externo a Node y no viniese con este instalado como si lo hace npm es por lo cual que lo descartamos como adminstrador de paquetes.</p><p>Pnpm nos ofrecia una mayor eficiencia que npm pero nos encontramos con problemas de compatibilidad con otras librer√≠as debido a su forma de organizar <em>node_modules</em>.</p><p>Luego de haber probado las diferentes opciones, decidimos usar npm.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="repositorio">Repositorio<a class="hash-link" href="#repositorio" title="Direct link to heading">‚Äã</a></h2><ul><li>Monorepo (turborepo)</li><li>Monolito</li></ul><p><em>En contrucci√≥n...</em></p>]]></content:encoded>
        </item>
    </channel>
</rss>