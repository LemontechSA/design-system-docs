<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://lemontechsa.github.io/suit-ui-docs/blog</id>
    <title>Suit UI Blog</title>
    <updated>2022-03-10T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://lemontechsa.github.io/suit-ui-docs/blog"/>
    <subtitle>Suit UI Blog</subtitle>
    <icon>https://lemontechsa.github.io/suit-ui-docs/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[¬øC√≥mo contruimos Suit UI?]]></title>
        <id>how-we-built-it</id>
        <link href="https://lemontechsa.github.io/suit-ui-docs/blog/how-we-built-it"/>
        <updated>2022-03-10T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Para el desarrollo de Suit UI, la librer√≠a de componentes del Design System de Lemontech, hemos tomado distintas decisiones con respecto a implementaciones t√©cnicas. En este blog planteamos las diferentes dificultades t√©cnicas a las que nos hemos visto enfrentados y el c√≥mo optamos por solucionarlas.]]></summary>
        <content type="html"><![CDATA[<br><p>Para el desarrollo de <strong>Suit UI</strong>, la librer√≠a de componentes del Design System de <a href="https://www.lemontech.com" target="_blank" rel="noopener noreferrer">Lemontech</a>, hemos tomado distintas decisiones con respecto a implementaciones t√©cnicas. En este blog planteamos las diferentes dificultades t√©cnicas a las que nos hemos visto enfrentados y el c√≥mo optamos por solucionarlas.</p><br><blockquote><p>üöß Suit UI sigue en desarrollo, debido a esto puede que algunos elementos escritos aqu√≠ con el tiempo cambien o est√©n desactualizados.</p></blockquote><br><h1>Requerimientos</h1><p>Los siguientes requerimientos fueron planteados para Suit UI:</p><ul><li>Debe ser consistente con el Design System de Lemontech.</li><li>Debe ser facilmente adaptable en los equipos de Lemontech.</li><li>No debe generar mayores inconvenientes al ser implementado en nuevas o en ya creadas aplicaciones.</li></ul><h1>Decisiones de implementaci√≥n</h1><h2 class="anchor anchorWithStickyNavbar_LWe7" id="enfoque">Enfoque<a class="hash-link" href="#enfoque" title="Direct link to heading">‚Äã</a></h2><br><div class="#1mjcm6l #li55pj #8gfukc"><img loading="lazy" src="/suit-ui-docs/assets/images/ui-libraries-2555b1b65800710c38c93d6f359a76d7.png" width="500" alt="Categorias de las Librer√≠as UI" class="img_ev3q"><p><em>Categorias de Librer√≠as UI.</em></p></div><br><p>Podemos dividir las librer√≠as de componentes en tres grandes categor√≠as:</p><ul><li><strong>CSS++</strong>: Librer√≠as que solo entregan un CSS potenciado.</li><li><strong>Style Systems</strong>: Librer√≠as que solo brindan estilos.</li><li><strong>Behavior Libraries</strong>: Librer√≠as que solo ofrecen un manejo del comportamiento.</li></ul><p>Tambi√©n existen librer√≠as que estan entre las intersecciones de estas categor√≠as y que a√±aden un conjunto de funcionalidades.</p><p>Con Suit UI quer√≠amos que el <a href="https://medium.com/swlh/what-is-dx-developer-experience-401a0e44a9d9" target="_blank" rel="noopener noreferrer">DX</a> (exp. del desarrollador) fuera igual o mejor que trabajando con<a href="https://mui.com" target="_blank" rel="noopener noreferrer">MUI</a>, <a href="https://chakra-ui.com" target="_blank" rel="noopener noreferrer">Chakra UI</a> y <a href="https://mantine.dev" target="_blank" rel="noopener noreferrer">Mantine</a>. Por lo tanto, implementamos la misma flexibilidad que estos tienen al ser part√≠cipe de las 3 categor√≠as mencionadas.</p><br><div class="#1mjcm6l #li55pj #8gfukc"><img loading="lazy" src="/suit-ui-docs/assets/images/librarie-subcategories-fc0363a5b475a5fdfcc5c6212fe0606b.png" width="350" alt="Sub-categorias de librer√≠as UI" class="img_ev3q"><p><em>Sub-categorias de librer√≠as UI.</em></p></div><br><p>Para que Suit UI fuese facilmente adoptable, era necesario que su estilizaci√≥n no fuese compleja y que no se tuviese que lograr hacer con CSS StyleSheets.</p><p>Es por este motivo que decidimos que la estilizaci√≥n fuese con clases de <a href="https://tailwindcss.com" target="_blank" rel="noopener noreferrer">Tailwind CSS</a>, que era algo que, en algunos equipos de Lemontech, ya estaba siendo aplicado y les facilitiba el desarrollo.</p><p>En Chakra UI, MUI y Mantine la estilizaci√≥n es mediante <strong>Style Props</strong> (estilos como propiedad) y/o usando la convenci√≥n <strong>sx</strong>, usando e inspirandose en librer√≠as como <a href="https://styled-system.com" target="_blank" rel="noopener noreferrer">Styled System</a> y <a href="https://theme-ui.com" target="_blank" rel="noopener noreferrer">Theme UI</a>.</p><br><div class="#1mjcm6l #li55pj #8gfukc"><img loading="lazy" src="/suit-ui-docs/assets/images/code-comparation-91cf60ce8a08cbef432866e3ae20edae.png" width="500" alt="Las 3 formas de estilizar un componente." class="img_ev3q"></div><br><p>Este enfoque de crear una librer√≠a la cual, aparte de brindar estilos y comportamiento, se pudiese estilizar con Tailwind CSS es novedoso y no ten√≠amos precedentes en los cuales inspirarnos.</p><p>Por lo cual investigamos su factibilidad t√©cnica, probando las tres siguientes opciones como librer√≠a base de Suit UI:</p><ul><li><a href="https://tailwindcss.com" target="_blank" rel="noopener noreferrer">Tailwind CSS</a></li><li><a href="https://github.com/ben-rogerson/twin.macro" target="_blank" rel="noopener noreferrer">Twin.macro</a></li><li><a href="https://twind.dev" target="_blank" rel="noopener noreferrer">Twind</a></li></ul><p>Lo primero que uno se puede preguntar es: ¬øpor qu√© no usar Tailwind CSS en Suit UI? Ser√≠a la opci√≥n ideal, pero no es algo factible de poder realizarse.</p><p>Tailwind CSS funciona con los post-procesador de CSS: <a href="https://autoprefixer.github.io" target="_blank" rel="noopener noreferrer">Autoprefixer</a> y <a href="https://purgecss.com" target="_blank" rel="noopener noreferrer">PurgeCSS</a>, estos en conjunto pueden inyectar CSS a un fichero CSS StyleSheet para estilizar los componentes con clases de Tailwind CSS.</p><p>Debido a lo anterior, es que usando Tailwind CSS no se le podr√≠a encargar a Suit UI la responsabilidad de configurar Tailwind CSS, sino que esta es traspasada al que implementa la librer√≠a en su aplicaci√≥n, y lo mismo pasar√≠a con respecto a su configuraci√≥n, que depender√≠a del framework que est√© ocupando (create-react-app, Next.js, Vite, etc...)</p><p>Otro punto a considerar es en el ambiente desarrollo de Suit UI. Para que fuese posible desarrollar con Tailwind CSS se tendr√≠a que implementar una configuraci√≥n en la empaquetaci√≥n del c√≥digo fuente para poder usarse junto con Storybook, luego, crear otra configuraci√≥n en la empaquetaci√≥n para el bundle que ser√≠a distribuido en npm y, por √∫ltimo, se tendr√≠a que tener en cuenta el purge al implementar la librer√≠a en alguna app.</p><p>El conjunto de estas problem√°ticas nos hizo decantarnos por las opciones de Tailwind css-in-js probando Twind y Twin.macro.</p><br><div class="#1mjcm6l #li55pj #8gfukc"><img loading="lazy" src="/suit-ui-docs/assets/images/twind-twin-comparation-2b207fa524f9b6c2b0c8d1fcb69e30aa.png" width="600" alt="Comparaci√≥n entre Twin.macro y Twind" class="img_ev3q"><p><em>Comparaci√≥n entre Twin.macro y Twind.</em></p></div><br><p><strong>Twin.macro</strong> es una librer√≠a que funciona con una <a href="https://github.com/kentcdodds/babel-plugin-macros" target="_blank" rel="noopener noreferrer">Macro</a> de Babel que permite estilizar componentes css-in-js usando clases de Tailwdin CSS y cuya transformaci√≥n es hecha en la compilaci√≥n.</p><p>Esta alternativa, si bien es interesante para ser implementada en aplicaciones, no lo es tanto para librer√≠as. Si se implementa en una librer√≠a, como en Suit UI, y luego esta es instalada en una app, como la transformaci√≥n de Babel es en build time, la estilizaci√≥n con clases de Tailwind CSS que se haga en los componentes no se ver√≠an reflejados en la app.</p><p>En <strong>Twind</strong> es diferente, no es necesario una compilaci√≥n previa y en comparaci√≥n de otras librer√≠as css-in-js su inyecci√≥n de CSS es <a href="https://twind.dev/handbook/introduction.html#benchmarks" target="_blank" rel="noopener noreferrer">m√°s √≥ptima</a>. Por lo que usar Twind como librer√≠a base para Suit UI ser√≠a lo m√°s sencillo y √≥ptimo, y es por lo cual optamos por utilizarla.</p><button class="css-h8t3ot #1yjno4c #rh2uuq #j1b3oq #1gzn608 #17u01q8 #eeentb #18d6dyf #1rkvjfm #zxekx2 #190gkzz #8gfukc #vlgikd #wtelnm #1aabpnr #bnnaeh #11eq35b #sh0rmp" type="button">Press me!</button><br><br><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword module" style="color:#00009f">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:#393A34">{</span><span class="token imports"> </span><span class="token imports maybe-class-name">Button</span><span class="token imports"> </span><span class="token imports punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword module" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"lemon-system"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">&lt;</span><span class="token maybe-class-name">Button</span><span class="token plain"> className</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">"uppercase p-10"</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token maybe-class-name">Press</span><span class="token plain"> me</span><span class="token operator" style="color:#393A34">!</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token operator" style="color:#393A34">/</span><span class="token maybe-class-name">Button</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="definici√≥n-de-bundle">Definici√≥n de Bundle<a class="hash-link" href="#definici√≥n-de-bundle" title="Direct link to heading">‚Äã</a></h2><br><div class="#1mjcm6l #li55pj #8gfukc"><img loading="lazy" src="/suit-ui-docs/assets/images/esbuild-comparation-036e7957bf72ae4404b08a54cf545b7c.png" width="600" alt="ESBuild benchmark" class="img_ev3q"><p><em>Benchmark <a href="https://esbuild.github.io" target="_blank" rel="noopener noreferrer">https://esbuild.github.io</a></em></p></div><br><p>Para empaquetar el c√≥digo fuente y poder distribuir la librer√≠a en npm ten√≠amos diferentes opciones:</p><ul><li><a href="https://webpack.js.org" target="_blank" rel="noopener noreferrer">Webpack</a></li><li><a href="https://rollupjs.org/guide/en" target="_blank" rel="noopener noreferrer">Rollup</a></li><li><a href="https://esbuild.github.io" target="_blank" rel="noopener noreferrer">Esbuild</a></li></ul><p>Webpack es la soluci√≥n m√°s com√∫n en la actualidad para empaquetar aplicaciones web, pero de poco ESBuild y Rollup han ido tomando m√°s espacio por su mayor eficiencia de empaquetaci√≥n y su simplicidad al ser configurados.</p><p>En comparaci√≥n con Rollup y Webpack, la alternativa de Esbuild viene listo, desde su instalaci√≥n, para empaquetar jsx y typescript sin necesidad de configurar nada y adem√°s de que su rapidez para empaquetar las apps es mucho mayor que las dos alternativas previas hizo que nos decant√°ramos por esta opci√≥n.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="administrador-de-paquetes">Administrador de paquetes<a class="hash-link" href="#administrador-de-paquetes" title="Direct link to heading">‚Äã</a></h2><br><div class="#1mjcm6l #li55pj #8gfukc"><img loading="lazy" src="/suit-ui-docs/assets/images/packages-comparation-ef2026a6804528eefa586fbf10d48c66.png" width="600" alt="Packages benchmark" class="img_ev3q"><p><em>Benchmark <a href="https://pnpm.io/benchmarks" target="_blank" rel="noopener noreferrer">https://pnpm.io/benchmarks</a>.</em></p></div><br><p>Como administrador de librer√≠as se tomaron en cuenta las siguientes:</p><ul><li><a href="https://www.npmjs.com" target="_blank" rel="noopener noreferrer">Npm</a></li><li><a href="https://yarnpkg.com" target="_blank" rel="noopener noreferrer">Yarn</a></li><li><a href="https://pnpm.io/es" target="_blank" rel="noopener noreferrer">Pnpm</a></li></ul><p>Uno de los principios t√©cnicos por lo que nos guiamos para la construcci√≥n de Suit UI fue la simplicidad, el evitar implementaciones que no contuviesen mayores beneficios.</p><p>Con respecto a Yarn, si bien, sol√≠a optarse debido a que era m√°s r√°pido como administrador de paquetes que npm. En la actualidad no hay gran diferencia entre estas, y a√±adiendo el hecho de que Yarn sea externo a Node y no viniese con este instalado como si lo hace Npm es por lo cual que lo descartamos como administradorr de paquetes.</p><p>Pnpm nos ofrec√≠a una mayor eficiencia que Npm pero nos encontramos con problemas de compatibilidad con otras librer√≠as debido a su forma de organizar <em>node_modules</em>.</p><p>Luego de haber probado las diferentes opciones, decidimos usar npm.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="repositorio">Repositorio<a class="hash-link" href="#repositorio" title="Direct link to heading">‚Äã</a></h2><p>Para organizar el repositorio se evaluaron dos opciones:</p><ul><li>Monorepo multipaquete usando <em>turborepo</em> <a href="https://github.com/rtelenta/test-monorepo-design-system" target="_blank" rel="noopener noreferrer">Repositorio de pruebas</a></li><li>Unica librer√≠a <a href="https://github.com/josiext/react-library-esbuild" target="_blank" rel="noopener noreferrer">Repositorio de pruebas</a></li></ul><p>Elegimos tener una <em>unica librer√≠a</em> debido a lo simple que es de mantener y al tama√±o del proyecto actualmente. Por otro lado si bien un <em>monorepo multipaquete</em> ofrece ventajas a nivel de organizaci√≥n de paquetes y ayuda a evitar problemas entre las dependencias, el setup y el proceso de publicaci√≥n es complejo.</p><p>Por estas razones creemos que un <em>monorepo multipaquete</em> es una buena opci√≥n cuando el proyecto es muy grande, debido a lo f√°cil de su organizaci√≥n. No se descarta optar por esta opci√≥n en un futuro.</p>]]></content>
        <author>
            <name>Jos√© N√∫√±ez</name>
            <uri>https://github.com/josiext</uri>
        </author>
        <author>
            <name>Renzo Talenta</name>
            <uri>https://github.com/rtelenta</uri>
        </author>
    </entry>
</feed>