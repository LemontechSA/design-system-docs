<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://lemontechsa.github.io/design-system-docs/blog</id>
    <title>Lemon System Blog</title>
    <updated>2022-03-10T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://lemontechsa.github.io/design-system-docs/blog"/>
    <subtitle>Lemon System Blog</subtitle>
    <icon>https://lemontechsa.github.io/design-system-docs/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[¬øC√≥mo contruimos Lemon System?]]></title>
        <id>how-we-built-it</id>
        <link href="https://lemontechsa.github.io/design-system-docs/blog/how-we-built-it"/>
        <updated>2022-03-10T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Para el desarrollo de Lemon System, la librer√≠a UI del design system de Lemontech, hemos tomado diferentes decisiones en lo que respecta a implementaciones t√©cnicas. En este blog planteamos las dificultades t√©cnicas a las que nos vimos enfrentados y el c√≥mo y por qu√© optamos por solucionarlas.]]></summary>
        <content type="html"><![CDATA[<p>Para el desarrollo de Lemon System, la librer√≠a UI del design system de Lemontech, hemos tomado diferentes decisiones en lo que respecta a implementaciones t√©cnicas. En este blog planteamos las dificultades t√©cnicas a las que nos vimos enfrentados y el c√≥mo y por qu√© optamos por solucionarlas.</p><blockquote><p>üöß La librer√≠a sigue en desarrollo, debido a esto puede que algunos topicos escritos aqu√≠ con el tiempo cambien o esten desactualizados.</p></blockquote><h1>Requerimientos</h1><p>Los siguientes requerimientos fueron planteados para Lemon System:</p><ul><li>Debe ser consistente con el Design System de Lemontech.</li><li>Debe ser facilmente adaptable en los equipos de Lemontech, considerando la conformaci√≥n de estos en su mayor√≠a por ingenieros Full-Stacks.</li><li>No debe crear mayores inconvenientes al implementarla en nuevas o en aplicaciones ya creadas.</li></ul><h1>Decisiones de implementaci√≥n</h1><h2 class="anchor anchorWithStickyNavbar_LWe7" id="estilos">Estilos<a class="hash-link" href="#estilos" title="Direct link to heading">‚Äã</a></h2><p>Investigamos dos formas viables de implementar la estilizaci√≥n de los componentes:</p><ul><li>Style Props (style-system, xstyled, theme-ui)</li><li>Tailwind como css-in-js (twind, twin.macro)</li></ul><p>Si bien la opci√≥n de Style Props es comun en las librer√≠as de componentes de Javascript, quisimos optar por la opci√≥n de css-in-js usando Twind para permitir a los desarrolladores estilizar los componentes con Tailwind mediante clases. </p><p>Al probar prototipos con diferentes librer√≠as de Style Props nos dimos cuenta que, si bien, es una forma com√∫n de hacer librer√≠as, sorpresivamente, no hay librer√≠a en al comunidad open source que permita implementarlo facilmente, eso y que adem√°s involucrar√≠a que los equipos tuviesen que tener un mayor conocimiento en CSS es por lo cual nos decantamos por la opci√≥n de estilizar como Tailwind.</p><p>El hacer una librer√≠a basada en Tailwind con Twind, es una forma novedosa e interesante de hacer una librer√≠a de UI ya que permitir√≠a a los usuarios estilizar los componentes de Lemon System tal como si hubiesen instalado Tailwind en sus aplicaciones y estuviesen estilizando sus propios componentes haciendo que tuviese un mejor recibimiento por parte de los desarrolladores internos y una mejor familiarizaci√≥n por parte de los equipos que ya usan Tailwind en sus aplicaciones frontends.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="definici√≥n-de-bundle">Definici√≥n de Bundle<a class="hash-link" href="#definici√≥n-de-bundle" title="Direct link to heading">‚Äã</a></h2><p>Para empaquetar el codigo fuente y poder distribuir la librer√≠a en npm teniamos diferentes opciones:</p><ul><li>Webpack</li><li>Rollup</li><li>Esbuild</li></ul><p>Uno de los principios que tomamos al optar por soluciones son la simplicidad y la eficienca. </p><p>Webpack es la soluci√≥n m√°s comun actualmente para las aplicaciones web, lo usa <strong>create-react-app</strong> y <strong>next.js</strong> (por el momento) sin embargo la libertad que da para ser configurado complejiza su implementaci√≥n en una librer√≠a donde debe ser configurado de cero, por otro lado, no es el empaquetador m√°s rapido por lo que la agilidad del deploy del proyecto se ver√≠a afectado. </p><p>Rollup y Esbuild son dos soluciones m√°s contemporaneas que webpack, en ambas su implementaci√≥n es m√°s sencilla y directa, sin embargo, por lejos, era mucho mayor la eficiencia en el tiempo de empaquetado que nos daba Esbuild, que por detras usa el lenguaje Go y compila a lenguaje maquina.</p><p> <img loading="lazy" alt="Esbuild comparation" src="/design-system-docs/assets/images/esbuild-comparation-036e7957bf72ae4404b08a54cf545b7c.png" width="853" height="407" class="img_ev3q">
<em>Benchmark <a href="https://esbuild.github.io" target="_blank" rel="noopener noreferrer">https://esbuild.github.io</a></em></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="administrador-de-paquetes">Administrador de paquetes<a class="hash-link" href="#administrador-de-paquetes" title="Direct link to heading">‚Äã</a></h2><p>Como administrador de librer√≠as se tomaron en cuenta las siguientes:</p><ul><li>npm</li><li>yarn</li><li>pnpm</li></ul><p>Uno de los principios t√©cnicos por lo que nos guiamos para la contrucci√≥n de Lemon System fue la simplicidad, el evitar implementaci√≥nes que no contuviesen mayores beneficios.</p><p>Con respecto a Yarn, si bien, tiempo atras, era optada por usarse en vez de npm debido a que era m√°s eficiente como administrador de paquetes, actualmente no hay gran diferenc√≠a entre estas, y sumandole el hecho de que yarn sea algo externo a Node y no viniese con este instalado como si lo hace npm es por lo cual que lo descartamos.</p><p>Pnpm nos ofrecia una mayor eficiencia que npm, pero decidimos optar por esta ultima sin embargo, esto debido a que con pnpm nos encontramos con problemas de compatibilidad con otras librer√≠as debido a su forma de organizar <em>node_modules</em>.</p><p> <img loading="lazy" alt="Esbuild comparation" src="/design-system-docs/assets/images/packages-comparation-ef2026a6804528eefa586fbf10d48c66.png" width="657" height="270" class="img_ev3q">
<em>Benchmark <a href="https://pnpm.io/benchmarks" target="_blank" rel="noopener noreferrer">https://pnpm.io/benchmarks</a></em></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="repositorio">Repositorio<a class="hash-link" href="#repositorio" title="Direct link to heading">‚Äã</a></h2><ul><li>Monorepo (turborepo)</li><li>Monolito</li></ul>]]></content>
        <author>
            <name>Jos√© N√∫√±ez</name>
            <uri>https://github.com/josiext</uri>
        </author>
        <author>
            <name>Renzo Talenta</name>
            <uri>https://github.com/rtelenta</uri>
        </author>
    </entry>
</feed>