<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://lemontechsa.github.io/suit-ui-docs/blog</id>
    <title>Suit UI Blog</title>
    <updated>2022-11-07T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://lemontechsa.github.io/suit-ui-docs/blog"/>
    <subtitle>Suit UI Blog</subtitle>
    <icon>https://lemontechsa.github.io/suit-ui-docs/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[¡Te damos la bienvenida a nuestro primer newsletter!]]></title>
        <id>first-newsletter</id>
        <link href="https://lemontechsa.github.io/suit-ui-docs/blog/first-newsletter"/>
        <updated>2022-11-07T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Hi]]></summary>
        <content type="html"><![CDATA[<p><img loading="lazy" src="https://c.tenor.com/XMDzYocSI_8AAAAC/gir-invaderzim.gif" alt="Hi" class="img_ev3q"></p><p><strong>¡Hola!</strong> Somos el equipo encargado del <em>Design System</em> de Lemontech, al que bautizamos <strong>Suit Design</strong> (así es, le hemos puesto <strong>traje</strong>). </p><p>En esta ocasión, queremos comentarte de qué trata esta iniciativa y cómo es que sus resultados permitirán que avancemos hacia un mundo legal moderno y justo.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="suit-design-el-design-system-de-lemontech">SUIT DESIGN: El Design System de Lemontech<a class="hash-link" href="#suit-design-el-design-system-de-lemontech" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="de-qué-se-está-hablando"><em>¿De qué se está hablando?</em><a class="hash-link" href="#de-qué-se-está-hablando" title="Direct link to heading">​</a></h3><p><img loading="lazy" src="https://c.tenor.com/1joXLyj7XiwAAAAM/the-grand-budapest-hotel-adrien-brody.gif" alt="Ux no es UI" class="img_ev3q"></p><p>Un sistema de diseño (o design system) es un <strong>conjunto de reglas, patrones y estándares</strong> para construir productos consistentes, es decir, es una fuente única de la verdad para las actividades y procesos compartidos entre áreas. </p><p>Es el <strong>ecosistema en el que ocurre el proceso de diseño</strong> y los resultados del design thinking llegan a su audiencia pretendida.</p><p>Un design system refleja la cultura, los valores de los equipos y el lenguaje visual de una organización, uniéndolos a través él. En definitiva, permite a los equipos construir mejores productos y servicios a través de un estándar común.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="experiencia-de-usuario">Experiencia de usuario<a class="hash-link" href="#experiencia-de-usuario" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="qué-implica-el-design-system-desde-la-experiencia-de-los-usuarios"><em>¿Qué implica el design system desde la experiencia de los usuarios?</em><a class="hash-link" href="#qué-implica-el-design-system-desde-la-experiencia-de-los-usuarios" title="Direct link to heading">​</a></h3><p> <img loading="lazy" src="https://media4.giphy.com/media/FRsYCa9eYbxHG/200.gif" alt="Ux no es UI" class="img_ev3q"></p><p><strong>Diseñar es escalar</strong>, un design system representa el avance concreto de una empresa hacia la estandarización de sus procesos, la colaboración efectiva de sus integrantes y la fidelización de sus clientes.</p><p>Ejemplos como Spectrum de <em>Adobe</em>, Material de <em>Google</em> y el design system de <em>Atlassian</em>, demuestran de forma directa cómo la incorporación de un lenguaje visual consistente a través de sus productos, <strong>le permite a las marcas ser reconocidas por su trabajo,</strong> y al mismo tiempo, habilita a sus colaboradores a <strong>generar soluciones de forma veloz y cohesiva</strong> con las intenciones de negocio y branding.</p><p>Una solución inteligente es invisible, por lo cuál, un producto exitoso es percibido como intuitivo y natural. En el mundo digital, esto se traduce en patrones y mapas de procesos que permiten a los usuarios obtener lo que necesitan con la mayor velocidad y sencillez. Hacer esto posible, implica entender qué buscan estos individuos y para qué lo hacen.</p><p>Pero, <strong>¿quiénes usan el traje?</strong> <em>(pun intended)</em>. No son únicamente los usuarios del software. Los usuarios de Suit Design son los <strong>diseñadores, desarrolladores y encargados de los productos en los diferentes niveles de Lemontech.</strong> Aquellos encargados de tomar decisiones en mayor y menor escala, y concretar las aspiraciones de la compañía.</p><p><em>Y cada uno de ellos tiene una necesidad, que esperamos resolver con Suit.</em></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="alcances-y-partes-del-design-system">Alcances y partes del design system<a class="hash-link" href="#alcances-y-partes-del-design-system" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="en-qué-está-basado-un-sistema-de-diseño-y-qué-puede-esperarse-de-él"><em>¿En qué está basado un sistema de diseño y qué puede esperarse de él?</em><a class="hash-link" href="#en-qué-está-basado-un-sistema-de-diseño-y-qué-puede-esperarse-de-él" title="Direct link to heading">​</a></h3><p><img loading="lazy" src="https://i.gifer.com/A3Zx.gif" alt="Tux, the Linux mascot" class="img_ev3q"></p><p>Este producto dirigido a crear otros productos se basa en <strong>dos conceptos principales: estandarización</strong> de ideas <strong>y división por componentes.</strong></p><p>Por un lado, con <strong>estandarización</strong> de ideas se referencia al <strong>por qué deben hacerse las cosas</strong>, las convenciones que son adoptadas para poder alcanzar un objetivo. Por otro lado, <strong>dividir por componentes implica reutilizar</strong> los elementos que forman el servicio, como ladrillos que construyen los productos, acotando cada uno a una función específica, <strong>incrementando así su flexibilidad</strong>.</p><p>Para proveedores de software-as-a-service (SaaS), <strong>es menester</strong> para el negocio <strong>brindar soluciones efectivas, intuitivas y placenteras</strong>, al crear un servicio <strong>para un ser humano</strong> quién busca resolver una tarea y paga para realizarla. Además, en un mundo digitalizado y con múltiples competidores, <strong>es imperioso diferenciarse y destacar</strong> para fidelizar clientes y crecer. Esto es resultado de contar con estructuras sólidas que permiten tener propuestas que amalgaman esfuerzos, tanto dentro como fuera de la compañía.</p><p>Los sistemas de diseño responden a esto de diferentes maneras, brindando estándares a los diversos actores de Lemontech. Para cada uno de ellos <strong>SUIT genera un paradigma modular, escalable y consistente</strong>.</p><p>Por esto, <strong>un sistema de diseño es un organismo vivo</strong>, un elemento que crece, evoluciona y se adapta, incorporando de forma paulatina y constante nuevas reglas, excepciones, modificaciones y correcciones a sus conceptos. </p><p>Contar con bases sólidas e investigación efectiva permite generar <strong>patrones de construcción progresiva y colaborativa</strong>, aportando estándares cómo:</p><ul><li>Pautas de diseño visual</li><li>Pautas de tonos de voz</li><li>Guías de marca</li><li>Guías de estilo para Front-end</li><li>Librerías de componentes, entre muchos otros</li></ul><p>Todos los puntos mencionados requieren de revisión constante y comunicación fluída entre áreas de diferentes intereses y campos de acción. </p><p>Con el objetivo de maximizar las posibilidades de éxito,
será vital mantener una documentación clara y comprensible de modo que pueda adoptarse de manera orgánica por el mayor número de integrantes de Lemontech.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="estrategias-organización-y-participación">Estrategias, organización y participación<a class="hash-link" href="#estrategias-organización-y-participación" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="entonces-por-qué-estamos-creando-suit"><em>Entonces... ¿Por qué estamos creando Suit?</em><a class="hash-link" href="#entonces-por-qué-estamos-creando-suit" title="Direct link to heading">​</a></h3><p><img loading="lazy" src="https://mehallo.com/blog/wp-content/uploads/2016/03/mehalloBlog_Nasibov05.gif.gif" alt="no lo se tu dime" class="img_ev3q">
No, es sólo para vernos ridículamente atractivos. Lo hacemos porque: </p><ul><li><p><strong>Permitirá crear experiencias consistentes</strong>, al suministrar un lenguaje visual claro y replicable, aumentando el reconocimiento de Lemontech, reforzando su mensaje y posicionándolo como un referente en la industria.</p></li><li><p>Será <strong>impulsor para mejorar la comunicación y coordinación de esfuerzos</strong> entre las áreas involucradas en la creación de los productos, eficientizando los tiempos de desarrollo y generando un terreno común a diseñadores y <em>devs</em>.</p></li><li><p><strong>Facilitará la evaluación de las métricas de negocio</strong> más relevantes, mejorando la ejecución de tareas y permitiendo una evaluación de los indicadores de forma transparente y útil para el negocio.</p></li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="cómo-se-abordan-las-tareas-y-cómo-se-compone-el-equipo"><em>¿Cómo se abordan las tareas y cómo se compone el equipo?</em><a class="hash-link" href="#cómo-se-abordan-las-tareas-y-cómo-se-compone-el-equipo" title="Direct link to heading">​</a></h3><p><img loading="lazy" src="https://thumbs.gfycat.com/GleamingUnpleasantAustrianpinscher-max-1mb.gif" alt="team surveycorps" class="img_ev3q"></p><p>Como hemos visto hasta ahora, <strong>un proyecto transversal</strong> <strong>requiere</strong> que <strong>múltiples perfiles</strong> se involucren en su concepción y desarrollo: desde diseñadores a desarrolladores de front-end, pasando por expertos en accesibilidad, estrategas de contenido, investigadores, líderes y managers de productos.</p><p><strong>¿Por qué?</strong> Porque sino, no se tendría éxito. <strong>El éxito de un design system</strong> como proyecto <strong>depende de la adopción</strong> del mismo <strong>entre los colaboradores</strong>.</p><p>En el <em>limonero tecnológico</em>, el proyecto es llevado adelante por el <em>equipo SUIT,</em> quienes orientan sus actividades alrededor del mismo. </p><p>Una <strong>metodología de trabajo centralizada</strong>  permite <strong>eficientizar el mantenimiento e iterar rápido</strong> y a la vez <strong>difundir más eficazmente</strong> las bendiciones de contar con una fuente de conocimiento visual.</p><p>Teniendo esto en cuenta, los esfuerzos se centran en el intercambio colaborativo, y <strong>es de mucha utilidad recibir las opiniones de todos los integrantes de la empresa</strong>, ya que  nutren el proyecto y permiten conseguir los resultados centrados en la experiencia limonera. </p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="epílogo">Epílogo<a class="hash-link" href="#epílogo" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="el-fin"><em>¿El fin?</em><a class="hash-link" href="#el-fin" title="Direct link to heading">​</a></h3><p><img loading="lazy" src="https://c.tenor.com/aLXi9FLrZoUAAAAC/voy-a-volver-por-ti-marty.gif" alt="volveremos" class="img_ev3q"></p><p>Apostamos a la experiencia de los desarrolladores y diseñadores, por ello nuestro <strong>primer objetivo es generar el UI Kit inicial.</strong> </p><p>Esto apunta a generar un conjunto de componentes reducido, que resuelvan un flujo particular, permitiendo:</p><ul><li>A nivel producto y negocio, que las decisiones sean consistentes y basadas en datos provistos por nuestros usuarios,</li><li>A nivel desarrollo, que los elementos sean sencillos de implementar y mantener conforme avancen los elementos disponibles.</li><li>A nivel experiencia, que permitan evaluar su comportamiento y asegurar que estamos en el buen camino.</li></ul><p><em>(volveremos a hablar de esto más adelante cuando revisemos versionados y arquitecturas del design system).</em></p><p><strong>¡Hemos llegado al final de nuestro primer encuentro!</strong> </p><p>Gracias por tomarte un minuto para leer este documento, y si te ha despertado interés, te invitamos a contactarnos cuándo gustes.</p><p>En las próximas entregas abordaremos el estado de los componentes, arquitecturas y documentación, versiones y estrategias para una adopción entre áreas.</p><p><strong>¡Nos vemos pronto!</strong></p><p><img loading="lazy" src="https://thumbs.gfycat.com/ReasonableThinIndochinahogdeer-max-1mb.gif" alt="team surveycorps" class="img_ev3q"></p><p><strong>Equipo Suit</strong>
<em>División de Reconocimiento especial en Survey Corps.</em></p><p>¿Te interesa colaborar? <strong>¡escribenos un mensaje!</strong></p>]]></content>
        <author>
            <name>Lia Godoy</name>
            <uri>https://cl.linkedin.com/in/liagodoyf</uri>
        </author>
        <author>
            <name>Mariano Ruiz</name>
            <uri>https://ar.linkedin.com/in/maraguruz</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[¿Cómo contruimos Suit UI?]]></title>
        <id>how-we-built-it</id>
        <link href="https://lemontechsa.github.io/suit-ui-docs/blog/how-we-built-it"/>
        <updated>2022-10-03T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Para el desarrollo de Suit UI, la librería de componentes del Design System de Lemontech, hemos tomado distintas decisiones con respecto a implementaciones técnicas. En este blog planteamos las diferentes dificultades técnicas a las que nos hemos visto enfrentados y el cómo optamos por solucionarlas.]]></summary>
        <content type="html"><![CDATA[<br><p>Para el desarrollo de <strong>Suit UI</strong>, la librería de componentes del Design System de <a href="https://www.lemontech.com" target="_blank" rel="noopener noreferrer">Lemontech</a>, hemos tomado distintas decisiones con respecto a implementaciones técnicas. En este blog planteamos las diferentes dificultades técnicas a las que nos hemos visto enfrentados y el cómo optamos por solucionarlas.</p><br><blockquote><p>🚧 Suit UI sigue en desarrollo, debido a esto puede que algunos elementos escritos aquí con el tiempo cambien o estén desactualizados.</p></blockquote><br><h1>Requerimientos</h1><p>Los siguientes requerimientos fueron planteados para Suit UI:</p><ul><li>Debe ser consistente con el Design System de Lemontech.</li><li>Debe ser facilmente adaptable en los equipos de Lemontech.</li><li>No debe generar mayores inconvenientes al ser implementado en nuevas o en ya creadas aplicaciones.</li></ul><h1>Decisiones de implementación</h1><h2 class="anchor anchorWithStickyNavbar_LWe7" id="enfoque">Enfoque<a class="hash-link" href="#enfoque" title="Direct link to heading">​</a></h2><br><div class="#1mjcm6l #li55pj #8gfukc"><img loading="lazy" src="/suit-ui-docs/assets/images/ui-libraries-2555b1b65800710c38c93d6f359a76d7.png" width="500" alt="Categorias de las Librerías UI" class="img_ev3q"><p><em>Categorias de Librerías UI.</em></p></div><br><p>Podemos dividir las librerías de componentes en tres grandes categorías:</p><ul><li><strong>CSS++</strong>: Librerías que solo entregan un CSS potenciado.</li><li><strong>Style Systems</strong>: Librerías que solo brindan estilos.</li><li><strong>Behavior Libraries</strong>: Librerías que solo ofrecen un manejo del comportamiento.</li></ul><p>También existen librerías que estan entre las intersecciones de estas categorías y que añaden un conjunto de funcionalidades.</p><p>Con Suit UI queríamos que el <a href="https://medium.com/swlh/what-is-dx-developer-experience-401a0e44a9d9" target="_blank" rel="noopener noreferrer">DX</a> (exp. del desarrollador) fuera igual o mejor que trabajando con<a href="https://mui.com" target="_blank" rel="noopener noreferrer">MUI</a>, <a href="https://chakra-ui.com" target="_blank" rel="noopener noreferrer">Chakra UI</a> y <a href="https://mantine.dev" target="_blank" rel="noopener noreferrer">Mantine</a>. Por lo tanto, implementamos la misma flexibilidad que estos tienen al ser partícipe de las 3 categorías mencionadas.</p><br><div class="#1mjcm6l #li55pj #8gfukc"><img loading="lazy" src="/suit-ui-docs/assets/images/librarie-subcategories-fc0363a5b475a5fdfcc5c6212fe0606b.png" width="350" alt="Sub-categorias de librerías UI" class="img_ev3q"><p><em>Sub-categorias de librerías UI.</em></p></div><br><p>Para que Suit UI fuese facilmente adoptable, era necesario que su estilización no fuese compleja y que no se tuviese que lograr hacer con CSS StyleSheets.</p><p>Es por este motivo que decidimos que la estilización fuese con clases de <a href="https://tailwindcss.com" target="_blank" rel="noopener noreferrer">Tailwind CSS</a>, que era algo que, en algunos equipos de Lemontech, ya estaba siendo aplicado y les facilitiba el desarrollo.</p><p>En Chakra UI, MUI y Mantine la estilización es mediante <strong>Style Props</strong> (estilos como propiedad) y/o usando la convención <strong>sx</strong>, usando e inspirandose en librerías como <a href="https://styled-system.com" target="_blank" rel="noopener noreferrer">Styled System</a> y <a href="https://theme-ui.com" target="_blank" rel="noopener noreferrer">Theme UI</a>.</p><br><div class="#1mjcm6l #li55pj #8gfukc"><img loading="lazy" src="/suit-ui-docs/assets/images/code-comparation-91cf60ce8a08cbef432866e3ae20edae.png" width="500" alt="Las 3 formas de estilizar un componente." class="img_ev3q"></div><br><p>Este enfoque de crear una librería la cual, aparte de brindar estilos y comportamiento, se pudiese estilizar con Tailwind CSS es novedoso y no teníamos precedentes en los cuales inspirarnos.</p><p>Por lo cual investigamos su factibilidad técnica, probando las tres siguientes opciones como librería base de Suit UI:</p><ul><li><a href="https://tailwindcss.com" target="_blank" rel="noopener noreferrer">Tailwind CSS</a></li><li><a href="https://github.com/ben-rogerson/twin.macro" target="_blank" rel="noopener noreferrer">Twin.macro</a></li><li><a href="https://twind.dev" target="_blank" rel="noopener noreferrer">Twind</a></li></ul><p>Lo primero que uno se puede preguntar es: ¿por qué no usar Tailwind CSS en Suit UI? Sería la opción ideal, pero no es algo factible de poder realizarse.</p><p>Tailwind CSS funciona con los post-procesador de CSS: <a href="https://autoprefixer.github.io" target="_blank" rel="noopener noreferrer">Autoprefixer</a> y <a href="https://purgecss.com" target="_blank" rel="noopener noreferrer">PurgeCSS</a>, estos en conjunto pueden inyectar CSS a un fichero CSS StyleSheet para estilizar los componentes con clases de Tailwind CSS.</p><p>Debido a lo anterior, es que usando Tailwind CSS no se le podría encargar a Suit UI la responsabilidad de configurar Tailwind CSS, sino que esta es traspasada al que implementa la librería en su aplicación, y lo mismo pasaría con respecto a su configuración, que dependería del framework que esté ocupando (create-react-app, Next.js, Vite, etc...)</p><p>Otro punto a considerar es en el ambiente desarrollo de Suit UI. Para que fuese posible desarrollar con Tailwind CSS se tendría que implementar una configuración en la empaquetación del código fuente para poder usarse junto con Storybook, luego, crear otra configuración en la empaquetación para el bundle que sería distribuido en npm y, por último, se tendría que tener en cuenta el purge al implementar la librería en alguna app.</p><p>El conjunto de estas problemáticas nos hizo decantarnos por las opciones de Tailwind css-in-js probando Twind y Twin.macro.</p><br><div class="#1mjcm6l #li55pj #8gfukc"><img loading="lazy" src="/suit-ui-docs/assets/images/twind-twin-comparation-2b207fa524f9b6c2b0c8d1fcb69e30aa.png" width="600" alt="Comparación entre Twin.macro y Twind" class="img_ev3q"><p><em>Comparación entre Twin.macro y Twind.</em></p></div><br><p><strong>Twin.macro</strong> es una librería que funciona con una <a href="https://github.com/kentcdodds/babel-plugin-macros" target="_blank" rel="noopener noreferrer">Macro</a> de Babel que permite estilizar componentes css-in-js usando clases de Tailwdin CSS y cuya transformación es hecha en la compilación.</p><p>Esta alternativa, si bien es interesante para ser implementada en aplicaciones, no lo es tanto para librerías. Si se implementa en una librería, como en Suit UI, y luego esta es instalada en una app, como la transformación de Babel es en build time, la estilización con clases de Tailwind CSS que se haga en los componentes no se verían reflejados en la app.</p><p>En <strong>Twind</strong> es diferente, no es necesario una compilación previa y en comparación de otras librerías css-in-js su inyección de CSS es <a href="https://twind.dev/handbook/introduction.html#benchmarks" target="_blank" rel="noopener noreferrer">más óptima</a>. Por lo que usar Twind como librería base para Suit UI sería lo más sencillo y óptimo, y es por lo cual optamos por utilizarla.</p><button class="focus:ring-focus #1puku7v">Press me!</button><br><br><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword module" style="color:#00009f">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:#393A34">{</span><span class="token imports"> </span><span class="token imports maybe-class-name">Button</span><span class="token imports"> </span><span class="token imports punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword module" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"@suit-ui/react"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">&lt;</span><span class="token maybe-class-name">Button</span><span class="token plain"> className</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">"uppercase p-10"</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token maybe-class-name">Press</span><span class="token plain"> me</span><span class="token operator" style="color:#393A34">!</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token operator" style="color:#393A34">/</span><span class="token maybe-class-name">Button</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="definición-de-bundle">Definición de Bundle<a class="hash-link" href="#definición-de-bundle" title="Direct link to heading">​</a></h2><br><div class="#1mjcm6l #li55pj #8gfukc"><img loading="lazy" src="/suit-ui-docs/assets/images/esbuild-comparation-036e7957bf72ae4404b08a54cf545b7c.png" width="600" alt="ESBuild benchmark" class="img_ev3q"><p><em>Benchmark <a href="https://esbuild.github.io" target="_blank" rel="noopener noreferrer">https://esbuild.github.io</a></em></p></div><br><p>Para empaquetar el código fuente y poder distribuir la librería en npm teníamos diferentes opciones:</p><ul><li><a href="https://webpack.js.org" target="_blank" rel="noopener noreferrer">Webpack</a></li><li><a href="https://rollupjs.org/guide/en" target="_blank" rel="noopener noreferrer">Rollup</a></li><li><a href="https://esbuild.github.io" target="_blank" rel="noopener noreferrer">Esbuild</a></li></ul><p>Webpack es la solución más común en la actualidad para empaquetar aplicaciones web, pero de poco ESBuild y Rollup han ido tomando más espacio por su mayor eficiencia de empaquetación y su simplicidad al ser configurados.</p><p>En comparación con Rollup y Webpack, la alternativa de Esbuild viene listo, desde su instalación, para empaquetar jsx y typescript sin necesidad de configurar nada y además de que su rapidez para empaquetar las apps es mucho mayor que las dos alternativas previas hizo que nos decantáramos por esta opción.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="administrador-de-paquetes">Administrador de paquetes<a class="hash-link" href="#administrador-de-paquetes" title="Direct link to heading">​</a></h2><br><div class="#1mjcm6l #li55pj #8gfukc"><img loading="lazy" src="/suit-ui-docs/assets/images/packages-comparation-ef2026a6804528eefa586fbf10d48c66.png" width="600" alt="Packages benchmark" class="img_ev3q"><p><em>Benchmark <a href="https://pnpm.io/benchmarks" target="_blank" rel="noopener noreferrer">https://pnpm.io/benchmarks</a>.</em></p></div><br><p>Como administrador de librerías se tomaron en cuenta las siguientes:</p><ul><li><a href="https://www.npmjs.com" target="_blank" rel="noopener noreferrer">Npm</a></li><li><a href="https://yarnpkg.com" target="_blank" rel="noopener noreferrer">Yarn</a></li><li><a href="https://pnpm.io/es" target="_blank" rel="noopener noreferrer">Pnpm</a></li></ul><p>Uno de los principios técnicos por lo que nos guiamos para la construcción de Suit UI fue la simplicidad, el evitar implementaciones que no contuviesen mayores beneficios.</p><p>Con respecto a Yarn, si bien, solía optarse debido a que era más rápido como administrador de paquetes que npm. En la actualidad no hay gran diferencia entre estas, y añadiendo el hecho de que Yarn sea externo a Node y no viniese con este instalado como si lo hace Npm es por lo cual que lo descartamos como administradorr de paquetes.</p><p>Pnpm nos ofrecía una mayor eficiencia que Npm pero nos encontramos con problemas de compatibilidad con otras librerías debido a su forma de organizar <em>node_modules</em>.</p><p>Luego de haber probado las diferentes opciones, decidimos usar npm.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="repositorio">Repositorio<a class="hash-link" href="#repositorio" title="Direct link to heading">​</a></h2><p>Para organizar el repositorio se evaluaron dos opciones:</p><ul><li>Monorepo multipaquete usando <em>turborepo</em> <a href="https://github.com/rtelenta/test-monorepo-design-system" target="_blank" rel="noopener noreferrer">Repositorio de pruebas</a></li><li>Unica librería <a href="https://github.com/josiext/react-library-esbuild" target="_blank" rel="noopener noreferrer">Repositorio de pruebas</a></li></ul><p>Elegimos tener una <em>unica librería</em> debido a lo simple que es de mantener y al tamaño del proyecto actualmente. Por otro lado si bien un <em>monorepo multipaquete</em> ofrece ventajas a nivel de organización de paquetes y ayuda a evitar problemas entre las dependencias, el setup y el proceso de publicación es complejo.</p><p>Por estas razones creemos que un <em>monorepo multipaquete</em> es una buena opción cuando el proyecto es muy grande, debido a lo fácil de su organización. No se descarta optar por esta opción en un futuro.</p>]]></content>
        <author>
            <name>José Núñez</name>
            <uri>https://cl.linkedin.com/in/jose-nunez-riveros?trk=public_profile_browsemap</uri>
        </author>
        <author>
            <name>Renzo Talenta</name>
            <uri>https://pe.linkedin.com/in/renzotev</uri>
        </author>
    </entry>
</feed>