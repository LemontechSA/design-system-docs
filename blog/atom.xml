<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://lemontechsa.github.io/design-system-docs/blog</id>
    <title>Lemon System Blog</title>
    <updated>2022-03-10T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://lemontechsa.github.io/design-system-docs/blog"/>
    <subtitle>Lemon System Blog</subtitle>
    <icon>https://lemontechsa.github.io/design-system-docs/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[¬øC√≥mo contruimos Lemon System?]]></title>
        <id>how-we-built-it</id>
        <link href="https://lemontechsa.github.io/design-system-docs/blog/how-we-built-it"/>
        <updated>2022-03-10T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Para definir y desarrollar la librer√≠a UI de React de Lemon System hemos tomado diferentes decisiones t√©cnicas. En este blog planteamos las dificultades a las que nos vimos enfrentados y el c√≥mo y por qu√© optamos por solucionarlas.]]></summary>
        <content type="html"><![CDATA[<p>Para definir y desarrollar la librer√≠a UI de React de Lemon System hemos tomado diferentes decisiones t√©cnicas. En este blog planteamos las dificultades a las que nos vimos enfrentados y el c√≥mo y por qu√© optamos por solucionarlas.</p><blockquote><p>üöß La librer√≠a sigue en desarrollo as√≠ que pueden cambiar algunas cosas escritas aqu√≠ con el tiempo.</p></blockquote><h1>Requerimientos</h1><p>Los siguientes requerimientos fueron planteados para la librer√≠a UI del Design System de Lemontech:</p><ul><li>Debe ser consistente con el Design System.</li><li>Debe ser facilmente adaptable en los equipos de Lemontech, considerando la conformaci√≥n de estos en su mayor√≠a por ingenieros Full-Stacks.</li><li>No debe crear mayores inconvenientes al implementarla en nuevas o en antiguas aplicaciones ya creadas.</li></ul><h1>Decisiones de implementaci√≥n</h1><h2 class="anchor anchorWithStickyNavbar_LWe7" id="estilos">Estilos<a class="hash-link" href="#estilos" title="Direct link to heading">‚Äã</a></h2><p>Dos formas de implementar la estilizaci√≥n de los componentes</p><ul><li>Style Props (style-system, xstyled, theme-ui)</li><li>Tailwind como css-in-js (twind, twin.macro)</li></ul><p>Si bien la opci√≥n de Style Props es comun en las librer√≠as de componentes de Javascript, quisimos optar por la opci√≥n de css-in-js usando Twind para permitir a los desarrolladores estilizar los componentes con Tailwind. </p><p>Al probar prototipos con diferentes librer√≠as de Style Props nos dimos cuenta que, si bien, es una forma com√∫n de hacer librer√≠as, sorpresivamente, no hay librer√≠a en al comunidad que permita implementarlo facilmente, eso y que adem√°s involucrar√≠a un gran cambio en la forma de estilizar componentes por parte de los equipos internos de Lemontech nos hizo decantarnos por la segunda opci√≥n.</p><p>El hacer una librer√≠a basada en Tailwind con twind, es una forma novedosa de hacer una librer√≠a de UI, pero estabamos seguro que tendr√≠a un mejor recibimiento por parte de los desarrolladores internos y por lo mismo iba a hacer m√°s facil la adopci√≥n de este por parte de los equipos de Lemontech ya que, en su mayor√≠a, ya estan familiarizados con usar Tailwind.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="definici√≥n-de-bundle">Definici√≥n de Bundle<a class="hash-link" href="#definici√≥n-de-bundle" title="Direct link to heading">‚Äã</a></h2><p>Para empaquetar el codigo fuente y poder distribuir la librer√≠a en npm teniamos var√≠as opciones.</p><ul><li>Webpack</li><li>Rollup</li><li>Esbuild</li></ul><p>Uno de los principios que tomamos al optar por soluciones son la simplicidad y la eficienca. </p><p>Webpack es la soluci√≥n m√°s comun actualmente para las aplicaciones web, lo usa <strong>create-react-app</strong> y <strong>next.js</strong> (por el momento) sin embargo la libertad que da para ser configurado complejiza su implementaci√≥n en una librer√≠a donde debe ser configurado de cero y por otro lado, no es el empaquetador m√°s rapido por lo que la agilidad de deploy se ver√≠a afectado. </p><p>Rollup y Esbuild son dos soluciones m√°s contemporaneas que webpack, ambas su implementaci√≥n son m√°s sencillas y directas, sin embargo, por lejos la eficiencia en el tiempo de empaquetado que nos da Esbuild que por detras usa Rust es un   </p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="administrador-de-paquetes">Administrador de paquetes<a class="hash-link" href="#administrador-de-paquetes" title="Direct link to heading">‚Äã</a></h2><ul><li>npm</li><li>yarn</li><li>pnpm</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="repositorio">Repositorio<a class="hash-link" href="#repositorio" title="Direct link to heading">‚Äã</a></h2><ul><li>Monorepo (turborepo)</li><li>Monolito</li></ul>]]></content>
        <author>
            <name>Jos√© N√∫√±ez</name>
            <uri>https://github.com/josiext</uri>
        </author>
        <author>
            <name>Renzo Talenta</name>
            <uri>https://github.com/rtelenta</uri>
        </author>
    </entry>
</feed>