"use strict";(self.webpackChunksuit_ui_docs=self.webpackChunksuit_ui_docs||[]).push([[562],{1597:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"/2022/07/11/newsletter","metadata":{"permalink":"/suit-ui-docs/blog/2022/07/11/newsletter","source":"@site/blog/2022-07-11-newsletter.md","title":"\xa1Te damos la bienvenida a nuestro primer newsletter!","description":"SUIT: El Design System de Lemontech","date":"2022-07-11T00:00:00.000Z","formattedDate":"July 11, 2022","tags":[],"readingTime":5.78,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"nextItem":{"title":"\xbfC\xf3mo contruimos Suit UI?","permalink":"/suit-ui-docs/blog/how-we-built-it"}},"content":"## SUIT: El Design System de Lemontech\\r\\n\\r\\n### *\xbfDe qu\xe9 estamos hablando?*\\r\\n\\r\\n![Ux no es UI](https://c.tenor.com/1joXLyj7XiwAAAAM/the-grand-budapest-hotel-adrien-brody.gif)\\r\\n\\r\\nUn sistema de dise\xf1o (o design system) es un **conjunto de reglas, patrones y est\xe1ndares** para construir productos consistentes, es decir, es una fuente \xfanica de la verdad para las actividades y procesos compartidos entre \xe1reas.\\r\\n\\r\\nEs el **ecosistema en el que ocurre el proceso de dise\xf1o** y los resultados del design thinking llegan a su audiencia pretendida.\\r\\n\\r\\nUn design system refleja la cultura, los valores de los equipos y el lenguaje visual de una organizaci\xf3n, uni\xe9ndolos a trav\xe9s \xe9l . En definitiva, permite a los equipos construir mejores productos y servicios.\\r\\n\\r\\n## Experiencia de usuario\\r\\n\\r\\n### *\xbfQu\xe9 implica el design system desde la experiencia de los usuarios?*\\r\\n\\r\\n ![Ux no es UI](https://media4.giphy.com/media/FRsYCa9eYbxHG/200.gif)\\r\\n\\r\\n**Dise\xf1ar es escalar**, un design system representa un avance concreto de una empresa hacia la fidelizaci\xf3n de sus clientes, la estandarizaci\xf3n de sus procesos y la colaboraci\xf3n efectiva de sus integrantes.\\r\\n\\r\\nEjemplos como Spectrum de Adobe, Material de Google y el design system de Atlassian, demuestran de forma directa c\xf3mo la incorporaci\xf3n de un lenguaje visual consistente a trav\xe9s de sus productos, le **permite a las empresas ser reconocidas por su trabajo**, y al mismo tiempo, habilita a sus colaboradores a **generar soluciones de forma veloz y cohesiva** con las intenciones de negocio y marca.\\r\\n\\r\\nUna soluci\xf3n inteligente es invisible, con la cu\xe1l, un producto exitoso es percibido como intuitivo y natural. En el mundo digital, esto se traduce en patrones y mapas de procesos que permiten a los usuarios obtener lo que necesitan con la mayor velocidad y sencillez. Hacer esto posible, implica entender qu\xe9 buscan estos individuos y para qu\xe9 lo hacen.\\r\\n\\r\\nPero, **\xbfqui\xe9nes usan nuestro traje?** (pun intended). No son \xfanicamente los usuarios de nuestro software. Los usuarios de Suit Design son los **dise\xf1adores, desarrolladores y encargados de los productos en los diferentes niveles de la compa\xf1\xeda.** Aquellos encargados de tomar decisiones en mayor y menor escala, y concretar las aspiraciones de Lemontech como negocio. Y cada uno de ellos tiene una necesidad, que esperamos resolver con Suit.\\r\\n\\r\\n## Alcances y partes del design system\\r\\n\\r\\n### *\xbfEn qu\xe9 est\xe1 basado un sistema de dise\xf1o y qu\xe9 podemos esperar de \xe9l?*\\r\\n\\r\\n![Tux, the Linux mascot](https://i.gifer.com/A3Zx.gif)\\r\\n\\r\\nEste producto dirigido a crear otros productos se basa en **dos conceptos principales: estandarizaci\xf3n** de ideas **y divisi\xf3n por componentes.**\\r\\n\\r\\nPor un lado, con **estandarizaci\xf3n** de ideas nos referimos al **por qu\xe9 deben hacerse las cosas**, las convenciones que adoptamos para poder alcanzar un objetivo. Por otro lado, **dividir por componentes implica reutilizar los elementos** que forman nuestro servicio, utiliz\xe1ndolos como ladrillos que construyen nuestros productos, acotando cada uno a una funci\xf3n espec\xedfica. As\xed, podemos incrementar su flexibilidad.\\r\\n\\r\\nComo proveedores de software-as-a-service (SaaS), **es menester** para nuestro negocio **brindar soluciones efectivas, intuitivas y placenteras**, porque creamos un servicio **para un ser humano** que busca resolver una tarea y paga para solucionarla. Adem\xe1s, en un mundo digitalizado y con m\xfaltiples competidores, **es imperioso diferenciarnos y destacar** para fidelizarlos y crecer, esto ser\xe1 resultado de contar con estructuras s\xf3lidas que nos permitan tener propuestas cohesivas, tanto dentro como fuera de la compa\xf1\xeda.\\r\\n\\r\\nLos sistemas de dise\xf1o responden a esto de diferentes maneras, brindando respuestas y est\xe1ndares a los m\xfaltiples actores de la empresa. Para cada uno de ellos **SUIT generar\xe1 un paradigma modular, escalable y consistente**, que sea relevante y que permita el intercambio inequ\xedvoco de ideas sobre los productos.\\r\\n\\r\\nDebido a estas caracter\xedsticas, **un sistema de dise\xf1o es un organismo vivo**, un elemento que crece, evoluciona y se adapta con la empresa, incorporando de forma paulatina y constante, nuevas reglas, excepciones, modificaciones y correcciones a sus conceptos.\\r\\n\\r\\nEntre algunos de los resultados que podemos obtener de un sistema de dise\xf1o en evoluci\xf3n encontramos:\\r\\n\\r\\n- Pautas de dise\xf1o visual\\r\\n- Pautas de tonos de voz\\r\\n- Gu\xedas de marca\\r\\n- Gu\xedas de estilo para Front-end\\r\\n- Librer\xedas de componentes (o UI kits)\\r\\n\\r\\nTodos estos son **est\xe1ndares de construcci\xf3n progresiva y colaborativa**, que requieren una revisi\xf3n constante y una comunicaci\xf3n flu\xedda entre \xe1reas de diferentes intereses y campos de acci\xf3n.\\r\\n\\r\\n## Estrategias, organizaci\xf3n y participaci\xf3n\\r\\n\\r\\n### *Entonces... \xbfPor qu\xe9 estamos creando Suit?*\\r\\n\\r\\n![no lo se tu dime](https://mehallo.com/blog/wp-content/uploads/2016/03/mehalloBlog_Nasibov05.gif.gif)\\r\\n\\r\\nNo, es s\xf3lo para vernos rid\xedculamente atractivos. Lo hacemos porque:\\r\\n\\r\\n- Nos **permitir\xe1 crear experiencias consistentes**, suministrando una imagen clara y replicable, aumentando el reconocimiento de una experiencia Lemontech, reforzando su mensaje y posicion\xe1ndonos como un referente en la industria.\\r\\n\\r\\n- Ser\xe1 un **impulsor para mejorar la comunicaci\xf3n y coordinaci\xf3n de esfuerzos** entre las \xe1reas involucradas en el desarrollo de los productos Lemontech, eficientizando los tiempos de desarrollo y generando un terreno com\xfan a dise\xf1adores y desarrolladores.\\r\\n\\r\\n- **Facilitar\xe1 la evaluaci\xf3n de m\xe9tricas de negocio** m\xe1s relevantes por y para cada equipo de Lemontech, mejorando la ejecuci\xf3n de tareas y permitiendo una evaluaci\xf3n de funcionalidades/caracter\xedsticas de forma transparente y \xfatil para el negocio.\\r\\n\\r\\n### *\xbfC\xf3mo se abordan las tareas y c\xf3mo se compone el equipo?*\\r\\n\\r\\n![team surveycorps](https://thumbs.gfycat.com/GleamingUnpleasantAustrianpinscher-max-1mb.gif)\\r\\n\\r\\nComo hemos visto hasta ahora, **un proyecto transversal** de este calibre, **requiere** que **m\xfaltiples perfiles** se involucren en su concepci\xf3n y desarrollo: desde dise\xf1adores a desarrolladores de front-end, pasando por expertos en accesibilidad, estrategas de contenido, investigadores, l\xedderes y managers de productos.\\r\\n\\r\\n**\xbfPor qu\xe9?** Porque sino, no tendremos \xe9xito. **El \xe9xito de un design system** como proyecto **depende de la adopci\xf3n** del mismo **entre los colaboradores**.\\r\\n\\r\\nEn nuestro querido limonero tecnol\xf3gico, el **proyecto es llevado adelante por** nuestro equipo, el **equipo SUIT**, quienes centralizamos nuestras actividades alrededor del mismo.\\r\\n\\r\\nSe escogi\xf3 una **metodolog\xeda de trabajo centralizada** en un equipo porque **eficientiza el mantenimiento regular,** a la vez **permite iterar r\xe1pido** ante los cambios (34dsh) **y difundir** las bendiciones de contar con una fuente centralizada de conocimiento visual.\\r\\n\\r\\nTeniendo esto en cuenta, nuestros esfuerzos se centran en el intercambio colaborativo, y **ser\xeda de mucha utilidad recibir las opiniones de todos los integrantes de Lemontech**, ya que esto nutrir\xe1 el proyecto y permitir\xe1 conseguir y difundir los resultados centrados en la experiencia limonera. Si te interesa colaborar, **\xa1escribenos un mensaje!**\\r\\n\\r\\nApostamos a la experiencia de los desarrolladores y dise\xf1adores, por ello nuestro **primer objetivo es generar el UI Kit inicial.** Esto apunta a generar un conjunto de componentes reducido, que resuelvan un flujo particular, permitiendo que a nivel producto y negocio las decisiones sean consistentes y basadas en datos provistos por nuestros usuarios, y que a nivel desarrollo los elementos sean sencillos de implementar y mantener conforme avancen los elementos disponibles *(volveremos a hablar de esto m\xe1s adelante cuando revisemos versionados y arquitecturas del design system).*\\r\\n\\r\\n## Pr\xf3ximamente\\r\\n\\r\\n**\xa1Hemos llegado al final de nuestro primer encuentro!**\\r\\n\\r\\nGracias por tomarte un minuto para leer este documento, y si te ha despertado inter\xe9s, te invitamos a contactarnos cu\xe1ndo gustes.\\r\\n\\r\\nEn las pr\xf3ximas entregas abordaremos el estado de los componentes, arquitecturas y documentaci\xf3n, versiones y estrategias para una adopci\xf3n entre \xe1reas.\\r\\n\\r\\n**\xa1Nos vemos pronto!**\\r\\n\\r\\n![team surveycorps](https://thumbs.gfycat.com/ReasonableThinIndochinahogdeer-max-1mb.gif)\\r\\n\\r\\n**Equipo Suit**\\r\\n*Divisi\xf3n de Reconocimiento especial en Survey Corps.*"},{"id":"how-we-built-it","metadata":{"permalink":"/suit-ui-docs/blog/how-we-built-it","source":"@site/blog/2022-03-10-como-contruimos-lemon-system/index.mdx","title":"\xbfC\xf3mo contruimos Suit UI?","description":"Para el desarrollo de Suit UI, la librer\xeda de componentes del Design System de Lemontech, hemos tomado distintas decisiones con respecto a implementaciones t\xe9cnicas. En este blog planteamos las diferentes dificultades t\xe9cnicas a las que nos hemos visto enfrentados y el c\xf3mo optamos por solucionarlas.","date":"2022-03-10T00:00:00.000Z","formattedDate":"March 10, 2022","tags":[],"readingTime":6.32,"hasTruncateMarker":true,"authors":[{"name":"Jos\xe9 N\xfa\xf1ez","title":"Suit UI Co-Creator","url":"https://github.com/josiext","imageURL":"https://avatars.githubusercontent.com/u/79015124?v=4","key":"jose"},{"name":"Renzo Talenta","title":"Suit UI Co-Creator","url":"https://github.com/rtelenta","imageURL":"https://avatars.githubusercontent.com/u/13630376?s=48&v=4","key":"renzo"}],"frontMatter":{"slug":"how-we-built-it","title":"\xbfC\xf3mo contruimos Suit UI?","authors":["jose","renzo"]},"prevItem":{"title":"\xa1Te damos la bienvenida a nuestro primer newsletter!","permalink":"/suit-ui-docs/blog/2022/07/11/newsletter"}},"content":"import { Box } from \\"lemon-system\\";\\nimport UI_LIBRARIES_IMAGE from \\"./ui-libraries.png\\";\\nimport LIBRARY_SUB_CATEGORIES_IMAGE from \\"./librarie-subcategories.png\\";\\nimport CODE_COMPARATION_IMAGE from \\"./code-comparation.png\\";\\nimport ESBUILD_COMPARATION_IMAGE from \\"./esbuild-comparation.png\\";\\nimport TWIND_TWIN_COMPARATION_IMAGE from \\"./twind-twin-comparation.png\\";\\nimport PACKAGE_COMPARATION_IMAGE from \\"./packages-comparation.png\\";\\n\\n<br />\\n\\nPara el desarrollo de **Suit UI**, la librer\xeda de componentes del Design System de [Lemontech](https://www.lemontech.com), hemos tomado distintas decisiones con respecto a implementaciones t\xe9cnicas. En este blog planteamos las diferentes dificultades t\xe9cnicas a las que nos hemos visto enfrentados y el c\xf3mo optamos por solucionarlas.\\n\\n\x3c!--truncate--\x3e\\n\\n<br />\\n\\n> \ud83d\udea7 Suit UI sigue en desarrollo, debido a esto puede que algunos elementos escritos aqu\xed con el tiempo cambien o est\xe9n desactualizados.\\n\\n<br />\\n\\n# Requerimientos\\n\\nLos siguientes requerimientos fueron planteados para Suit UI:\\n\\n- Debe ser consistente con el Design System de Lemontech.\\n- Debe ser facilmente adaptable en los equipos de Lemontech.\\n- No debe generar mayores inconvenientes al ser implementado en nuevas o en ya creadas aplicaciones.\\n\\n# Decisiones de implementaci\xf3n\\n\\n## Enfoque\\n\\n<br />\\n\\n<Box className=\\"flex flex-col items-center\\">\\n<img\\n  src={UI_LIBRARIES_IMAGE}\\n  width=\\"500\\"\\n  alt=\\"Categorias de las Librer\xedas UI\\"\\n/>\\n\\n_Categorias de Librer\xedas UI._\\n\\n</Box>\\n\\n<br />\\n\\nPodemos dividir las librer\xedas de componentes en tres grandes categor\xedas:\\n\\n- **CSS++**: Librer\xedas que solo entregan un CSS potenciado.\\n- **Style Systems**: Librer\xedas que solo brindan estilos.\\n- **Behavior Libraries**: Librer\xedas que solo ofrecen un manejo del comportamiento.\\n\\nTambi\xe9n existen librer\xedas que estan entre las intersecciones de estas categor\xedas y que a\xf1aden un conjunto de funcionalidades.\\n\\nCon Suit UI quer\xedamos que el [DX](https://medium.com/swlh/what-is-dx-developer-experience-401a0e44a9d9) (exp. del desarrollador) fuera igual o mejor que trabajando con[MUI](https://mui.com), [Chakra UI](https://chakra-ui.com) y [Mantine](https://mantine.dev). Por lo tanto, implementamos la misma flexibilidad que estos tienen al ser part\xedcipe de las 3 categor\xedas mencionadas.\\n\\n<br />\\n\\n<Box className=\\"flex flex-col items-center\\">\\n\\n<img\\n  src={LIBRARY_SUB_CATEGORIES_IMAGE}\\n  width=\\"350\\"\\n  alt=\\"Sub-categorias de librer\xedas UI\\"\\n/>\\n\\n_Sub-categorias de librer\xedas UI._\\n\\n</Box>\\n\\n<br />\\n\\nPara que Suit UI fuese facilmente adoptable, era necesario que su estilizaci\xf3n no fuese compleja y que no se tuviese que lograr hacer con CSS StyleSheets.\\n\\nEs por este motivo que decidimos que la estilizaci\xf3n fuese con clases de [Tailwind CSS](https://tailwindcss.com), que era algo que, en algunos equipos de Lemontech, ya estaba siendo aplicado y les facilitiba el desarrollo.\\n\\nEn Chakra UI, MUI y Mantine la estilizaci\xf3n es mediante **Style Props** (estilos como propiedad) y/o usando la convenci\xf3n **sx**, usando e inspirandose en librer\xedas como [Styled System](https://styled-system.com) y [Theme UI](https://theme-ui.com).\\n\\n<br />\\n\\n<Box className=\\"flex flex-col items-center\\">\\n\\n<img\\n  src={CODE_COMPARATION_IMAGE}\\n  width=\\"500\\"\\n  alt=\\"Las 3 formas de estilizar un componente.\\"\\n/>\\n\\n</Box>\\n\\n<br />\\n\\nEste enfoque de crear una librer\xeda la cual, aparte de brindar estilos y comportamiento, se pudiese estilizar con Tailwind CSS es novedoso y no ten\xedamos precedentes en los cuales inspirarnos.\\n\\nPor lo cual investigamos su factibilidad t\xe9cnica, probando las tres siguientes opciones como librer\xeda base de Suit UI:\\n\\n- [Tailwind CSS](https://tailwindcss.com)\\n- [Twin.macro](https://github.com/ben-rogerson/twin.macro)\\n- [Twind](https://twind.dev)\\n\\nLo primero que uno se puede preguntar es: \xbfpor qu\xe9 no usar Tailwind CSS en Suit UI? Ser\xeda la opci\xf3n ideal, pero no es algo factible de poder realizarse.\\n\\nTailwind CSS funciona con los post-procesador de CSS: [Autoprefixer](https://autoprefixer.github.io) y [PurgeCSS](https://purgecss.com), estos en conjunto pueden inyectar CSS a un fichero CSS StyleSheet para estilizar los componentes con clases de Tailwind CSS.\\n\\nDebido a lo anterior, es que usando Tailwind CSS no se le podr\xeda encargar a Suit UI la responsabilidad de configurar Tailwind CSS, sino que esta es traspasada al que implementa la librer\xeda en su aplicaci\xf3n, y lo mismo pasar\xeda con respecto a su configuraci\xf3n, que depender\xeda del framework que est\xe9 ocupando (create-react-app, Next.js, Vite, etc...)\\n\\nOtro punto a considerar es en el ambiente desarrollo de Suit UI. Para que fuese posible desarrollar con Tailwind CSS se tendr\xeda que implementar una configuraci\xf3n en la empaquetaci\xf3n del c\xf3digo fuente para poder usarse junto con Storybook, luego, crear otra configuraci\xf3n en la empaquetaci\xf3n para el bundle que ser\xeda distribuido en npm y, por \xfaltimo, se tendr\xeda que tener en cuenta el purge al implementar la librer\xeda en alguna app.\\n\\nEl conjunto de estas problem\xe1ticas nos hizo decantarnos por las opciones de Tailwind css-in-js probando Twind y Twin.macro.\\n\\n<br />\\n\\n<Box className=\\"flex flex-col items-center\\">\\n\\n<img\\n  src={TWIND_TWIN_COMPARATION_IMAGE}\\n  width=\\"600\\"\\n  alt=\\"Comparaci\xf3n entre Twin.macro y Twind\\"\\n/>\\n\\n_Comparaci\xf3n entre Twin.macro y Twind._\\n\\n</Box>\\n\\n<br />\\n\\n**Twin.macro** es una librer\xeda que funciona con una [Macro](https://github.com/kentcdodds/babel-plugin-macros) de Babel que permite estilizar componentes css-in-js usando clases de Tailwdin CSS y cuya transformaci\xf3n es hecha en la compilaci\xf3n.\\n\\nEsta alternativa, si bien es interesante para ser implementada en aplicaciones, no lo es tanto para librer\xedas. Si se implementa en una librer\xeda, como en Suit UI, y luego esta es instalada en una app, como la transformaci\xf3n de Babel es en build time, la estilizaci\xf3n con clases de Tailwind CSS que se haga en los componentes no se ver\xedan reflejados en la app.\\n\\nEn **Twind** es diferente, no es necesario una compilaci\xf3n previa y en comparaci\xf3n de otras librer\xedas css-in-js su inyecci\xf3n de CSS es [m\xe1s \xf3ptima](https://twind.dev/handbook/introduction.html#benchmarks). Por lo que usar Twind como librer\xeda base para Suit UI ser\xeda lo m\xe1s sencillo y \xf3ptimo, y es por lo cual optamos por utilizarla.\\n\\nimport { Button } from \\"lemon-system\\";\\n\\n<Button className=\\"uppercase p-10\\" onClick={() => alert(\\"Made with Twind! \ud83d\ude03\\")}>\\n  Press me!\\n</Button>\\n\\n<br />\\n<br />\\n\\n```js\\nimport { Button } from \\"suit-ui\\";\\n\\n<Button className=\\"uppercase p-10\\">Press me!</Button>;\\n```\\n\\n## Definici\xf3n de Bundle\\n\\n<br />\\n\\n<Box className=\\"flex flex-col items-center\\">\\n\\n<img src={ESBUILD_COMPARATION_IMAGE} width=\\"600\\" alt=\\"ESBuild benchmark\\" />\\n\\n_Benchmark https://esbuild.github.io_\\n\\n</Box>\\n\\n<br />\\n\\nPara empaquetar el c\xf3digo fuente y poder distribuir la librer\xeda en npm ten\xedamos diferentes opciones:\\n\\n- [Webpack](https://webpack.js.org)\\n- [Rollup](https://rollupjs.org/guide/en)\\n- [Esbuild](https://esbuild.github.io)\\n\\nWebpack es la soluci\xf3n m\xe1s com\xfan en la actualidad para empaquetar aplicaciones web, pero de poco ESBuild y Rollup han ido tomando m\xe1s espacio por su mayor eficiencia de empaquetaci\xf3n y su simplicidad al ser configurados.\\n\\nEn comparaci\xf3n con Rollup y Webpack, la alternativa de Esbuild viene listo, desde su instalaci\xf3n, para empaquetar jsx y typescript sin necesidad de configurar nada y adem\xe1s de que su rapidez para empaquetar las apps es mucho mayor que las dos alternativas previas hizo que nos decant\xe1ramos por esta opci\xf3n.\\n\\n## Administrador de paquetes\\n\\n<br />\\n\\n<Box className=\\"flex flex-col items-center\\">\\n\\n<img src={PACKAGE_COMPARATION_IMAGE} width=\\"600\\" alt=\\"Packages benchmark\\" />\\n\\n_Benchmark https://pnpm.io/benchmarks._\\n\\n</Box>\\n\\n<br />\\n\\nComo administrador de librer\xedas se tomaron en cuenta las siguientes:\\n\\n- [Npm](https://www.npmjs.com)\\n- [Yarn](https://yarnpkg.com)\\n- [Pnpm](https://pnpm.io/es)\\n\\nUno de los principios t\xe9cnicos por lo que nos guiamos para la construcci\xf3n de Suit UI fue la simplicidad, el evitar implementaciones que no contuviesen mayores beneficios.\\n\\nCon respecto a Yarn, si bien, sol\xeda optarse debido a que era m\xe1s r\xe1pido como administrador de paquetes que npm. En la actualidad no hay gran diferencia entre estas, y a\xf1adiendo el hecho de que Yarn sea externo a Node y no viniese con este instalado como si lo hace Npm es por lo cual que lo descartamos como administradorr de paquetes.\\n\\nPnpm nos ofrec\xeda una mayor eficiencia que Npm pero nos encontramos con problemas de compatibilidad con otras librer\xedas debido a su forma de organizar _node_modules_.\\n\\nLuego de haber probado las diferentes opciones, decidimos usar npm.\\n\\n## Repositorio\\n\\nPara organizar el repositorio se evaluaron dos opciones:\\n\\n- Monorepo multipaquete usando _turborepo_ [Repositorio de pruebas](https://github.com/rtelenta/test-monorepo-design-system)\\n- Unica librer\xeda [Repositorio de pruebas](https://github.com/josiext/react-library-esbuild)\\n\\nElegimos tener una _unica librer\xeda_ debido a lo simple que es de mantener y al tama\xf1o del proyecto actualmente. Por otro lado si bien un _monorepo multipaquete_ ofrece ventajas a nivel de organizaci\xf3n de paquetes y ayuda a evitar problemas entre las dependencias, el setup y el proceso de publicaci\xf3n es complejo.\\n\\nPor estas razones creemos que un _monorepo multipaquete_ es una buena opci\xf3n cuando el proyecto es muy grande, debido a lo f\xe1cil de su organizaci\xf3n. No se descarta optar por esta opci\xf3n en un futuro."}]}')}}]);