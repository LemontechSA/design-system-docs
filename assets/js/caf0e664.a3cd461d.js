"use strict";(self.webpackChunklemon_system_docs=self.webpackChunklemon_system_docs||[]).push([[258],{2377:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"how-we-built-it","metadata":{"permalink":"/design-system-docs/blog/how-we-built-it","source":"@site/blog/2022-03-10-como-contruimos-lemon-system/index.md","title":"\xbfC\xf3mo contruimos Lemon System?","description":"Para el desarrollo de Lemon System, la librer\xeda UI del design system de Lemontech, hemos tomado diferentes decisiones en lo que respecta a implementaciones t\xe9cnicas. En este blog planteamos las dificultades t\xe9cnicas a las que nos vimos enfrentados y el c\xf3mo y por qu\xe9 optamos por solucionarlas.","date":"2022-03-10T00:00:00.000Z","formattedDate":"March 10, 2022","tags":[],"readingTime":3.24,"hasTruncateMarker":true,"authors":[{"name":"Jos\xe9 N\xfa\xf1ez","title":"Lemon System Co-Creator","url":"https://github.com/josiext","imageURL":"https://avatars.githubusercontent.com/u/79015124?v=4","key":"jose"},{"name":"Renzo Talenta","title":"Lemon System Co-Creator","url":"https://github.com/rtelenta","imageURL":"https://avatars.githubusercontent.com/u/13630376?s=48&v=4","key":"renzo"}],"frontMatter":{"slug":"how-we-built-it","title":"\xbfC\xf3mo contruimos Lemon System?","authors":["jose","renzo"]}},"content":"Para el desarrollo de Lemon System, la librer\xeda UI del design system de Lemontech, hemos tomado diferentes decisiones en lo que respecta a implementaciones t\xe9cnicas. En este blog planteamos las dificultades t\xe9cnicas a las que nos vimos enfrentados y el c\xf3mo y por qu\xe9 optamos por solucionarlas.\\n\\n\x3c!--truncate--\x3e\\n\\n> \ud83d\udea7 La librer\xeda sigue en desarrollo, debido a esto puede que algunos topicos escritos aqu\xed con el tiempo cambien o esten desactualizados.\\n\\n\\n# Requerimientos\\n\\nLos siguientes requerimientos fueron planteados para Lemon System:\\n\\n- Debe ser consistente con el Design System de Lemontech.\\n- Debe ser facilmente adaptable en los equipos de Lemontech, considerando la conformaci\xf3n de estos en su mayor\xeda por ingenieros Full-Stacks.\\n- No debe crear mayores inconvenientes al implementarla en nuevas o en aplicaciones ya creadas.\\n\\n# Decisiones de implementaci\xf3n \\n\\n## Estilos\\n\\nInvestigamos dos formas viables de implementar la estilizaci\xf3n de los componentes:\\n\\n- Style Props (style-system, xstyled, theme-ui)\\n- Tailwind como css-in-js (twind, twin.macro)\\n\\nSi bien la opci\xf3n de Style Props es comun en las librer\xedas de componentes de Javascript, quisimos optar por la opci\xf3n de css-in-js usando Twind para permitir a los desarrolladores estilizar los componentes con Tailwind mediante clases. \\n\\nAl probar prototipos con diferentes librer\xedas de Style Props nos dimos cuenta que, si bien, es una forma com\xfan de hacer librer\xedas, sorpresivamente, no hay librer\xeda en al comunidad open source que permita implementarlo facilmente, eso y que adem\xe1s involucrar\xeda que los equipos tuviesen que tener un mayor conocimiento en CSS es por lo cual nos decantamos por la opci\xf3n de estilizar como Tailwind.\\n\\nEl hacer una librer\xeda basada en Tailwind con Twind, es una forma novedosa e interesante de hacer una librer\xeda de UI ya que permitir\xeda a los usuarios estilizar los componentes de Lemon System tal como si hubiesen instalado Tailwind en sus aplicaciones y estuviesen estilizando sus propios componentes haciendo que tuviese un mejor recibimiento por parte de los desarrolladores internos y una mejor familiarizaci\xf3n por parte de los equipos que ya usan Tailwind en sus aplicaciones frontends.\\n\\n## Definici\xf3n de Bundle\\n\\nPara empaquetar el codigo fuente y poder distribuir la librer\xeda en npm teniamos diferentes opciones:\\n\\n- Webpack\\n- Rollup\\n- Esbuild\\n\\nUno de los principios que tomamos al optar por soluciones son la simplicidad y la eficienca. \\n\\nWebpack es la soluci\xf3n m\xe1s comun actualmente para las aplicaciones web, lo usa **create-react-app** y **next.js** (por el momento) sin embargo la libertad que da para ser configurado complejiza su implementaci\xf3n en una librer\xeda donde debe ser configurado de cero, por otro lado, no es el empaquetador m\xe1s rapido por lo que la agilidad del deploy del proyecto se ver\xeda afectado. \\n\\nRollup y Esbuild son dos soluciones m\xe1s contemporaneas que webpack, en ambas su implementaci\xf3n es m\xe1s sencilla y directa, sin embargo, por lejos, era mucho mayor la eficiencia en el tiempo de empaquetado que nos daba Esbuild, que por detras usa el lenguaje Go y compila a lenguaje maquina.\\n\\n ![Esbuild comparation](./esbuild-comparation.png)\\n*Benchmark https://esbuild.github.io*\\n\\n## Administrador de paquetes\\n\\nComo administrador de librer\xedas se tomaron en cuenta las siguientes:\\n\\n- npm\\n- yarn\\n- pnpm\\n\\nUno de los principios t\xe9cnicos por lo que nos guiamos para la contrucci\xf3n de Lemon System fue la simplicidad, el evitar implementaci\xf3nes que no contuviesen mayores beneficios.\\n\\nCon respecto a Yarn, si bien, tiempo atras, era optada por usarse en vez de npm debido a que era m\xe1s eficiente como administrador de paquetes, actualmente no hay gran diferenc\xeda entre estas, y sumandole el hecho de que yarn sea algo externo a Node y no viniese con este instalado como si lo hace npm es por lo cual que lo descartamos.\\n\\nPnpm nos ofrecia una mayor eficiencia que npm, pero decidimos optar por esta ultima sin embargo, esto debido a que con pnpm nos encontramos con problemas de compatibilidad con otras librer\xedas debido a su forma de organizar *node_modules*.\\n\\n ![Esbuild comparation](./packages-comparation.png)\\n *Benchmark https://pnpm.io/benchmarks*\\n\\n\\n## Repositorio\\n\\n- Monorepo (turborepo)\\n- Monolito"}]}')}}]);