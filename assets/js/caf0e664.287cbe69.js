"use strict";(self.webpackChunklemon_system_docs=self.webpackChunklemon_system_docs||[]).push([[258],{2377:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"how-we-built-it","metadata":{"permalink":"/design-system-docs/blog/how-we-built-it","source":"@site/blog/2022-03-10-como-contruimos-lemon-system/index.mdx","title":"\xbfC\xf3mo contruimos Lemon System?","description":"Para el desarrollo de Lemon System, la librer\xeda UI del Design System de Lemontech, hemos tomado diferentes decisiones con respecto a implementaciones t\xe9cnicas. En este blog planteamos las diferentes dificultades t\xe9cnicas a las que nos hemos vistos enfrentados y el c\xf3mo optamos por solucionarlas.","date":"2022-03-10T00:00:00.000Z","formattedDate":"March 10, 2022","tags":[],"readingTime":6.015,"hasTruncateMarker":true,"authors":[{"name":"Jos\xe9 N\xfa\xf1ez","title":"Lemon System Co-Creator","url":"https://github.com/josiext","imageURL":"https://avatars.githubusercontent.com/u/79015124?v=4","key":"jose"},{"name":"Renzo Talenta","title":"Lemon System Co-Creator","url":"https://github.com/rtelenta","imageURL":"https://avatars.githubusercontent.com/u/13630376?s=48&v=4","key":"renzo"}],"frontMatter":{"slug":"how-we-built-it","title":"\xbfC\xf3mo contruimos Lemon System?","authors":["jose","renzo"]}},"content":"import { Box } from \\"lemon-system\\";\\nimport UI_LIBRARIES_IMAGE from \\"./ui-libraries.png\\";\\nimport LIBRARY_SUB_CATEGORIES_IMAGE from \\"./librarie-subcategories.png\\";\\nimport CODE_COMPARATION_IMAGE from \\"./code-comparation.png\\";\\nimport ESBUILD_COMPARATION_IMAGE from \\"./esbuild-comparation.png\\";\\nimport TWIND_TWIN_COMPARATION_IMAGE from \\"./twind-twin-comparation.png\\";\\nimport PACKAGE_COMPARATION_IMAGE from \\"./packages-comparation.png\\";\\n\\n<br />\\n\\nPara el desarrollo de **Lemon System**, la librer\xeda UI del Design System de [Lemontech](https://www.lemontech.com), hemos tomado diferentes decisiones con respecto a implementaciones t\xe9cnicas. En este blog planteamos las diferentes dificultades t\xe9cnicas a las que nos hemos vistos enfrentados y el c\xf3mo optamos por solucionarlas.\\n\\n\x3c!--truncate--\x3e\\n\\n<br />\\n\\n> \ud83d\udea7 Lemon System sigue en desarrollo, debido a esto puede que algunos elementos escritos aqu\xed con el tiempo cambien o esten desactualizados.\\n\\n<br />\\n\\n# Requerimientos\\n\\nLos siguientes requerimientos fueron planteados para Lemon System:\\n\\n- Debe ser consistente con el Design System de Lemontech.\\n- Debe ser facilmente adaptable en los equipos de Lemontech.\\n- No debe crear mayores inconvenientes al ser implemenado en nuevas o en ya creadas aplicaciones.\\n\\n# Decisiones de implementaci\xf3n\\n\\n## Enfoque\\n\\n<br />\\n\\n<Box className=\\"flex flex-col items-center\\">\\n<img\\n  src={UI_LIBRARIES_IMAGE}\\n  width=\\"500\\"\\n  alt=\\"Categorias de las Librer\xedas UI\\"\\n/>\\n\\n_Categorias de Librer\xedas UI._\\n\\n</Box>\\n\\n<br />\\n\\nExisten variados enfoques para definir una librer\xeda de interfaces, las cuales podemos dividir en tres grandes categor\xedas: **CSS++** (Librer\xedas que solo entregan un CSS potenciado), **Style Systems** (librer\xedas que solamente brindan estilos) y **Behavior Libraries** (librer\xedas que solo ofrecen un manejo del comportamiento). Tambi\xe9n existen librer\xedas que estan entre las intersecciones de estas categor\xedas y que a\xf1aden un conjunto de funcionalidades.\\n\\nLa mejor opci\xf3n para que Lemon System tuviese una consistencia con el Design System y que adem\xe1s brindar\xe1 una mejor [experiencia de desarrollo (DX)](https://medium.com/swlh/what-is-dx-developer-experience-401a0e44a9d9) y, por lo mismo, una mejor adaptabilidad era optar por desarrollar la librer\xeda cubriendo las 3 categor\xedas mencionadas, tal como lo hacen [MUI](https://mui.com), [Chakra UI](https://chakra-ui.com) y [Mantine](https://mantine.dev).\\n\\n<br />\\n\\n<Box className=\\"flex flex-col items-center\\">\\n\\n<img\\n  src={LIBRARY_SUB_CATEGORIES_IMAGE}\\n  width=\\"350\\"\\n  alt=\\"Sub-categorias de librer\xedas UI\\"\\n/>\\n\\n_Sub-categorias de librer\xedas UI._\\n\\n</Box>\\n\\n<br />\\n\\nPara que la librer\xeda fuese facilmente adoptable era necesario que su estilizaci\xf3n no fuese compleja y preferiblemente que no se tuviese que crear CSS StyleSheets sino que fuese simplemente con clases de [Tailwind CSS](https://tailwindcss.com), que era algo, que en ciertos equipos, ya estaba siendo aplicado y les facilitiba el desarrollo.\\n\\nEn Chakra UI, MUI y Mantine la estilizaci\xf3n es mediante **Style Props** (estilos como propiedad) y/o usando la convenci\xf3n **sx**, usando e inspirandose en librer\xedas como [Styled System](https://styled-system.com) y [Theme UI](https://theme-ui.com).\\n\\n<br />\\n\\n<Box className=\\"flex flex-col items-center\\">\\n\\n<img\\n  src={CODE_COMPARATION_IMAGE}\\n  width=\\"500\\"\\n  alt=\\"Las 3 formas de estilizar un componente.\\"\\n/>\\n\\n</Box>\\n\\n<br />\\n\\nEste enfoque de crear una librer\xeda la cual, aparte de brindar estilos y comportamiento, se pudiese estilizar con Tailwind CSS es novedoso y no teniamos presedentes en los cuales inspirarnos, por lo cual investigamos su factibilidad t\xe9cnica probando usar las tres siguientes opciones como librer\xeda base de Lemon System:\\n\\n- [Tailwind CSS](https://tailwindcss.com)\\n- [Twin.macro](https://github.com/ben-rogerson/twin.macro)\\n- [Twind](https://twind.dev)\\n\\nLo primero que se puede pensar es: \xbfpor qu\xe9 no usar simplemente Tailwind CSS en Lemon System? Y, en verdad, ser\xeda la opci\xf3n ideal pero que lastimamente no es algo factible de hacer.\\n\\nTailwind CSS en una aplicaci\xf3n de React funciona con los post-procesador de CSS: [Autoprefixer](https://autoprefixer.github.io) y [PurgeCSS](https://purgecss.com), estos en conjunto pueden inyectar CSS a un fichero CSS StyleSheet para estilizar los componentes con clases de Tailwind CSS.\\n\\nLa principal complicaci\xf3n t\xe9cnica que tiene el implementar Tailwind CSS en la librer\xeda directamente es que es imperioso para Tailwind inyectar CSS en un CSS StyleSheet y debido a este proceso es que ya no se le podr\xeda encargar a Lemon System la responsabilidad de configurar Tailwind CSS sino que esta es traspasada al que implementa la librer\xeda en su aplicaci\xf3n, y lo mismo pasar\xeda con respecto a su configuraci\xf3n, que depender\xeda del framework que est\xe9 ocupando (create-react-app, Next.js, Vite, etc...).\\n\\nOtro punto a considerar es en el ambiente desarrollo de Lemon System, en este, para que fuese posible desarrollar con Tailwind CSS se tendr\xeda que implementar una configuraci\xf3n en la empaquetaci\xf3n del c\xf3digo fuente para poder userse junto con Storybook, luego, crear otra configuraci\xf3n en la empaquetaci\xf3n para el bundle que ser\xeda distribuido en npm y, por \xfaltimo, se tendr\xeda que tener en cuenta tambi\xe9n el purge al implementar la librer\xeda en alguna app.\\n\\nEl conjunto de estas problematicos nos hizo decantarnos por las opciones de Tailwind css-in-js probando Twind y Twin.macro.\\n\\n<br />\\n\\n<Box className=\\"flex flex-col items-center\\">\\n\\n<img\\n  src={TWIND_TWIN_COMPARATION_IMAGE}\\n  width=\\"600\\"\\n  alt=\\"Comparaci\xf3n entre Twin.macro y Twind\\"\\n/>\\n\\n_Comparaci\xf3n entre Twin.macro y Twind._\\n\\n</Box>\\n\\n<br />\\n\\n**Twin.macro** es una librer\xeda que funciona con una [Macro](https://github.com/kentcdodds/babel-plugin-macros) de Babel que permite estilizar componentes css-in-js usando clases de Tailwdin CSS y cuya transformaci\xf3n es hecha en la compilaci\xf3n.\\n\\nEsta alternativa si bien es interesante para ser implementada en aplicaciones no lo es tanto para librer\xedas. Si se implementa en una librer\xeda, como en Lemon System, y luego esta es instalada en una app, como la transformaci\xf3n de Babel es en build time, la estilizaci\xf3n con clases de Tailwind CSS que se haga en los componentes no se ver\xedan reflejados en la app.\\n\\nEn **Twind** es diferente, no es necesario una compilaci\xf3n previa y en comparaci\xf3n de otras librer\xedas css-in-js su inyecci\xf3n de CSS es [m\xe1s optima](https://twind.dev/handbook/introduction.html#benchmarks). Por lo que usar Twind como librer\xeda base para Lemon System ser\xeda lo m\xe1s sencillo y optimo, y es por lo cual optamos por utilizarla.\\n\\nimport { Button } from \\"lemon-system\\";\\n\\n<Button className=\\"uppercase p-10\\" onClick={() => alert(\\"Made with Twind! \ud83d\ude03\\")}>\\n  Press me!\\n</Button>\\n\\n<br />\\n<br />\\n\\n```js\\nimport { Button } from \\"lemon-system\\";\\n\\n<Button className=\\"uppercase p-10\\">Press me!</Button>;\\n```\\n\\n## Definici\xf3n de Bundle\\n\\n<br />\\n\\n<Box className=\\"flex flex-col items-center\\">\\n\\n<img src={ESBUILD_COMPARATION_IMAGE} width=\\"600\\" alt=\\"ESBuild benchmark\\" />\\n\\n_Benchmark https://esbuild.github.io_\\n\\n</Box>\\n\\n<br />\\n\\nPara empaquetar el codigo fuente y poder distribuir la librer\xeda en npm teniamos diferentes opciones:\\n\\n- [Webpack](https://webpack.js.org)\\n- [Rollup](https://rollupjs.org/guide/en)\\n- [Esbuild](https://esbuild.github.io)\\n\\nWebpack es la soluci\xf3n m\xe1s comun actualmente para empaquetar aplicaciones web pero de apoco ESBuild y Rollup han ido tomando m\xe1s espacio por su mayor eficiencia de empaquetaci\xf3n y su simplicidad al ser configurados.\\n\\nEn comparaci\xf3n con Rollup y Webpack, la alternativa de Esbuild viene listo, desde su instalaci\xf3n, para empaquetar jsx y typescript sin necesidad de configurar nada y adem\xe1s de que su rapidez para empaquetar las apps es mucho mayor que las dos alternativas previas hizo que nos decantaramos por esta opci\xf3n.\\n\\n## Administrador de paquetes\\n\\n<br />\\n\\n<Box className=\\"flex flex-col items-center\\">\\n\\n<img src={PACKAGE_COMPARATION_IMAGE} width=\\"600\\" alt=\\"Packages benchmark\\" />\\n\\n_Benchmark https://pnpm.io/benchmarks._\\n\\n</Box>\\n\\n<br />\\n\\nComo administrador de librer\xedas se tomaron en cuenta las siguientes:\\n\\n- [Npm](https://www.npmjs.com)\\n- [Yarn](https://yarnpkg.com)\\n- [Pnpm](https://pnpm.io/es)\\n\\nUno de los principios t\xe9cnicos por lo que nos guiamos para la contrucci\xf3n de Lemon System fue la simplicidad, el evitar implementaci\xf3nes que no contuviesen mayores beneficios.\\n\\nCon respecto a Yarn, si bien, solia optarse debido a que era m\xe1s rapido como administrador de paquetes que npm. Actualmente no hay gran diferenc\xeda entre estas, y a\xf1adiendo el hecho de que yarn sea externo a Node y no viniese con este instalado como si lo hace npm es por lo cual que lo descartamos como adminstrador de paquetes.\\n\\nPnpm nos ofrecia una mayor eficiencia que npm pero nos encontramos con problemas de compatibilidad con otras librer\xedas debido a su forma de organizar _node_modules_.\\n\\nLuego de haber probado las diferentes opciones, decidimos usar npm.\\n\\n## Repositorio\\n\\n- Monorepo (turborepo)\\n- Monolito\\n\\n_En contrucci\xf3n..._"}]}')}}]);